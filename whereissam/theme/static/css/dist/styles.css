/*! tailwindcss v4.1.13 | MIT License | https://tailwindcss.com */
@layer properties;
@layer theme, base, components, utilities;
@layer theme {
  :root, :host {
    --font-sans: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji",
      "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    --font-serif: ui-serif, Georgia, Cambria, "Times New Roman", Times, serif;
    --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono",
      "Courier New", monospace;
    --color-green-600: oklch(62.7% 0.194 149.214);
    --color-blue-600: oklch(54.6% 0.245 262.881);
    --color-gray-50: oklch(98.5% 0.002 247.839);
    --color-gray-100: oklch(96.7% 0.003 264.542);
    --color-gray-600: oklch(44.6% 0.03 256.802);
    --color-gray-700: oklch(37.3% 0.034 259.733);
    --color-gray-800: oklch(27.8% 0.033 256.848);
    --color-black: #000;
    --color-white: #fff;
    --spacing: 0.25rem;
    --text-sm: 0.875rem;
    --text-sm--line-height: calc(1.25 / 0.875);
    --text-xl: 1.25rem;
    --text-xl--line-height: calc(1.75 / 1.25);
    --text-3xl: 1.875rem;
    --text-3xl--line-height: calc(2.25 / 1.875);
    --text-5xl: 3rem;
    --text-5xl--line-height: 1;
    --font-weight-bold: 700;
    --tracking-normal: 0em;
    --leading-normal: 1.5;
    --ease-in: cubic-bezier(0.4, 0, 1, 1);
    --ease-out: cubic-bezier(0, 0, 0.2, 1);
    --ease-in-out: cubic-bezier(0.4, 0, 0.2, 1);
    --default-transition-duration: 150ms;
    --default-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    --default-font-family: var(--font-sans);
    --default-mono-font-family: var(--font-mono);
  }
}
@layer base {
  *, ::after, ::before, ::backdrop, ::file-selector-button {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    border: 0 solid;
  }
  html, :host {
    line-height: 1.5;
    -webkit-text-size-adjust: 100%;
    tab-size: 4;
    font-family: var(--default-font-family, ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji");
    font-feature-settings: var(--default-font-feature-settings, normal);
    font-variation-settings: var(--default-font-variation-settings, normal);
    -webkit-tap-highlight-color: transparent;
  }
  hr {
    height: 0;
    color: inherit;
    border-top-width: 1px;
  }
  abbr:where([title]) {
    -webkit-text-decoration: underline dotted;
    text-decoration: underline dotted;
  }
  h1, h2, h3, h4, h5, h6 {
    font-size: inherit;
    font-weight: inherit;
  }
  a {
    color: inherit;
    -webkit-text-decoration: inherit;
    text-decoration: inherit;
  }
  b, strong {
    font-weight: bolder;
  }
  code, kbd, samp, pre {
    font-family: var(--default-mono-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace);
    font-feature-settings: var(--default-mono-font-feature-settings, normal);
    font-variation-settings: var(--default-mono-font-variation-settings, normal);
    font-size: 1em;
  }
  small {
    font-size: 80%;
  }
  sub, sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
  }
  sub {
    bottom: -0.25em;
  }
  sup {
    top: -0.5em;
  }
  table {
    text-indent: 0;
    border-color: inherit;
    border-collapse: collapse;
  }
  :-moz-focusring {
    outline: auto;
  }
  progress {
    vertical-align: baseline;
  }
  summary {
    display: list-item;
  }
  ol, ul, menu {
    list-style: none;
  }
  img, svg, video, canvas, audio, iframe, embed, object {
    display: block;
    vertical-align: middle;
  }
  img, video {
    max-width: 100%;
    height: auto;
  }
  button, input, select, optgroup, textarea, ::file-selector-button {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    border-radius: 0;
    background-color: transparent;
    opacity: 1;
  }
  :where(select:is([multiple], [size])) optgroup {
    font-weight: bolder;
  }
  :where(select:is([multiple], [size])) optgroup option {
    padding-inline-start: 20px;
  }
  ::file-selector-button {
    margin-inline-end: 4px;
  }
  ::placeholder {
    opacity: 1;
  }
  @supports (not (-webkit-appearance: -apple-pay-button))  or (contain-intrinsic-size: 1px) {
    ::placeholder {
      color: currentcolor;
    }
    @supports (color: color-mix(in lab, red, red)) {
      ::placeholder {
        color: color-mix(in oklab, currentcolor 50%, transparent);
      }
    }
  }
  textarea {
    resize: vertical;
  }
  ::-webkit-search-decoration {
    -webkit-appearance: none;
  }
  ::-webkit-date-and-time-value {
    min-height: 1lh;
    text-align: inherit;
  }
  ::-webkit-datetime-edit {
    display: inline-flex;
  }
  ::-webkit-datetime-edit-fields-wrapper {
    padding: 0;
  }
  ::-webkit-datetime-edit, ::-webkit-datetime-edit-year-field, ::-webkit-datetime-edit-month-field, ::-webkit-datetime-edit-day-field, ::-webkit-datetime-edit-hour-field, ::-webkit-datetime-edit-minute-field, ::-webkit-datetime-edit-second-field, ::-webkit-datetime-edit-millisecond-field, ::-webkit-datetime-edit-meridiem-field {
    padding-block: 0;
  }
  ::-webkit-calendar-picker-indicator {
    line-height: 1;
  }
  :-moz-ui-invalid {
    box-shadow: none;
  }
  button, input:where([type="button"], [type="reset"], [type="submit"]), ::file-selector-button {
    appearance: button;
  }
  ::-webkit-inner-spin-button, ::-webkit-outer-spin-button {
    height: auto;
  }
  [hidden]:where(:not([hidden="until-found"])) {
    display: none !important;
  }
}
@layer utilities {
  .diff {
    position: relative;
    display: grid;
    width: 100%;
    overflow: hidden;
    webkit-user-select: none;
    user-select: none;
    grid-template-rows: 1fr 1.8rem 1fr;
    direction: ltr;
    container-type: inline-size;
    grid-template-columns: auto 1fr;
  }
  .diff:focus-visible, .diff:has(.diff-item-1:focus-visible) {
    outline-style: var(--tw-outline-style);
    outline-width: 2px;
    outline-offset: 1px;
    outline-color: var(--color-base-content);
  }
  .diff:focus-visible {
    outline-style: var(--tw-outline-style);
    outline-width: 2px;
    outline-offset: 1px;
    outline-color: var(--color-base-content);
  }
  .diff:focus-visible .diff-resizer {
    min-width: 95cqi;
    max-width: 95cqi;
  }
  .diff:has(.diff-item-1:focus-visible) {
    outline-style: var(--tw-outline-style);
    outline-width: 2px;
    outline-offset: 1px;
  }
  .diff:has(.diff-item-1:focus-visible) .diff-resizer {
    min-width: 5cqi;
    max-width: 5cqi;
  }
  @supports (-webkit-overflow-scrolling: touch) and (overflow: -webkit-paged-x) {
    .diff:focus .diff-resizer {
      min-width: 5cqi;
      max-width: 5cqi;
    }
    .diff:has(.diff-item-1:focus) .diff-resizer {
      min-width: 95cqi;
      max-width: 95cqi;
    }
  }
  .modal {
    pointer-events: none;
    visibility: hidden;
    position: fixed;
    inset: calc(0.25rem * 0);
    margin: calc(0.25rem * 0);
    display: grid;
    height: 100%;
    max-height: none;
    width: 100%;
    max-width: none;
    align-items: center;
    justify-items: center;
    background-color: transparent;
    padding: calc(0.25rem * 0);
    color: inherit;
    overflow-x: hidden;
    transition: translate 0.3s ease-out, visibility 0.3s allow-discrete, background-color 0.3s ease-out, opacity 0.1s ease-out;
    overflow-y: hidden;
    overscroll-behavior: contain;
    z-index: 999;
    scrollbar-gutter: auto;
  }
  .modal::backdrop {
    display: none;
  }
  .modal.modal-open, .modal[open], .modal:target {
    pointer-events: auto;
    visibility: visible;
    opacity: 100%;
    background-color: oklch(0% 0 0/ 0.4);
  }
  .modal.modal-open .modal-box, .modal[open] .modal-box, .modal:target .modal-box {
    translate: 0 0;
    scale: 1;
    opacity: 1;
  }
  @starting-style {
    .modal.modal-open, .modal[open], .modal:target {
      visibility: hidden;
      opacity: 0%;
    }
  }
  .fab {
    pointer-events: none;
    position: fixed;
    inset-inline-end: calc(0.25rem * 4);
    bottom: calc(0.25rem * 4);
    z-index: 999;
    display: flex;
    flex-direction: column-reverse;
    align-items: flex-end;
    gap: calc(0.25rem * 2);
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
    white-space: nowrap;
  }
  .fab > * {
    pointer-events: auto;
    display: flex;
    align-items: center;
    gap: calc(0.25rem * 2);
  }
  .fab > *:hover, .fab > *:has(:focus-visible) {
    z-index: 1;
  }
  .fab > [tabindex]:first-child {
    position: relative;
    display: grid;
    transition-property: opacity, visibility, rotate;
    transition-duration: 0.2s;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  }
  .fab .fab-close {
    position: absolute;
    inset-inline-end: calc(0.25rem * 0);
    bottom: calc(0.25rem * 0);
  }
  .fab .fab-main-action {
    position: absolute;
    inset-inline-end: calc(0.25rem * 0);
    bottom: calc(0.25rem * 0);
  }
  .fab:focus-within:has(.fab-close) > [tabindex], .fab:focus-within:has(.fab-main-action) > [tabindex] {
    rotate: 90deg;
    opacity: 0%;
  }
  .fab:focus-within > [tabindex]:first-child {
    pointer-events: none;
  }
  .fab:focus-within > :nth-child(n + 2) {
    visibility: visible;
    --tw-scale-x: 100%;
    --tw-scale-y: 100%;
    --tw-scale-z: 100%;
    scale: var(--tw-scale-x) var(--tw-scale-y);
    opacity: 100%;
  }
  .fab > :nth-child(n + 2) {
    visibility: hidden;
    --tw-scale-x: 80%;
    --tw-scale-y: 80%;
    --tw-scale-z: 80%;
    scale: var(--tw-scale-x) var(--tw-scale-y);
    opacity: 0%;
    transition-property: opacity, scale, visibility;
    transition-duration: 0.2s;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  }
  .fab > :nth-child(n + 2).fab-main-action, .fab > :nth-child(n + 2).fab-close {
    --tw-scale-x: 100%;
    --tw-scale-y: 100%;
    --tw-scale-z: 100%;
    scale: var(--tw-scale-x) var(--tw-scale-y);
  }
  .fab > :nth-child(3) {
    transition-delay: 30ms;
  }
  .fab > :nth-child(4) {
    transition-delay: 60ms;
  }
  .fab > :nth-child(5) {
    transition-delay: 90ms;
  }
  .fab > :nth-child(6) {
    transition-delay: 120ms;
  }
  .fab > :nth-child(7) {
    display: none;
  }
  .tooltip {
    position: relative;
    display: inline-block;
    --tt-bg: var(--color-neutral);
    --tt-off: calc(100% + 0.5rem);
    --tt-tail: calc(100% + 1px + 0.25rem);
  }
  .tooltip > :where(.tooltip-content), .tooltip:where([data-tip]):before {
    position: absolute;
    max-width: 20rem;
    border-radius: var(--radius-field);
    padding-inline: calc(0.25rem * 2);
    padding-block: calc(0.25rem * 1);
    text-align: center;
    white-space: normal;
    color: var(--color-neutral-content);
    opacity: 0%;
    font-size: 0.875rem;
    line-height: 1.25;
    background-color: var(--tt-bg);
    width: max-content;
    pointer-events: none;
    z-index: 2;
    --tw-content: attr(data-tip);
    content: var(--tw-content);
  }
  @media (prefers-reduced-motion: no-preference) {
    .tooltip > :where(.tooltip-content), .tooltip:where([data-tip]):before {
      transition: opacity 0.2s cubic-bezier(0.4, 0, 0.2, 1) 75ms, transform 0.2s cubic-bezier(0.4, 0, 0.2, 1) 75ms;
    }
  }
  @media (prefers-reduced-motion: no-preference) {
    .tooltip:after {
      transition: opacity 0.2s cubic-bezier(0.4, 0, 0.2, 1) 75ms, transform 0.2s cubic-bezier(0.4, 0, 0.2, 1) 75ms;
    }
  }
  .tooltip:after {
    position: absolute;
    opacity: 0%;
    background-color: var(--tt-bg);
    content: "";
    pointer-events: none;
    width: 0.625rem;
    height: 0.25rem;
    display: block;
    mask-repeat: no-repeat;
    mask-position: -1px 0;
    --mask-tooltip: url("data:image/svg+xml,%3Csvg width='10' height='4' viewBox='0 0 8 4' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0.500009 1C3.5 1 3.00001 4 5.00001 4C7 4 6.5 1 9.5 1C10 1 10 0.499897 10 0H0C-1.99338e-08 0.5 0 1 0.500009 1Z' fill='black'/%3E%3C/svg%3E%0A");
    mask-image: var(--mask-tooltip);
  }
  .tooltip.tooltip-open > .tooltip-content, .tooltip.tooltip-open[data-tip]:before, .tooltip.tooltip-open:after, .tooltip[data-tip]:not([data-tip=""]):hover > .tooltip-content, .tooltip[data-tip]:not([data-tip=""]):hover[data-tip]:before, .tooltip[data-tip]:not([data-tip=""]):hover:after, .tooltip:not(:has(.tooltip-content:empty)):has(.tooltip-content):hover > .tooltip-content, .tooltip:not(:has(.tooltip-content:empty)):has(.tooltip-content):hover[data-tip]:before, .tooltip:not(:has(.tooltip-content:empty)):has(.tooltip-content):hover:after, .tooltip:has(:focus-visible) > .tooltip-content, .tooltip:has(:focus-visible)[data-tip]:before, .tooltip:has(:focus-visible):after {
    opacity: 100%;
    --tt-pos: 0rem;
  }
  @media (prefers-reduced-motion: no-preference) {
    .tooltip.tooltip-open > .tooltip-content, .tooltip.tooltip-open[data-tip]:before, .tooltip.tooltip-open:after, .tooltip[data-tip]:not([data-tip=""]):hover > .tooltip-content, .tooltip[data-tip]:not([data-tip=""]):hover[data-tip]:before, .tooltip[data-tip]:not([data-tip=""]):hover:after, .tooltip:not(:has(.tooltip-content:empty)):has(.tooltip-content):hover > .tooltip-content, .tooltip:not(:has(.tooltip-content:empty)):has(.tooltip-content):hover[data-tip]:before, .tooltip:not(:has(.tooltip-content:empty)):has(.tooltip-content):hover:after, .tooltip:has(:focus-visible) > .tooltip-content, .tooltip:has(:focus-visible)[data-tip]:before, .tooltip:has(:focus-visible):after {
      transition: opacity 0.2s cubic-bezier(0.4, 0, 0.2, 1) 0s, transform 0.2s cubic-bezier(0.4, 0, 0.2, 1) 0ms;
    }
  }
  .tooltip > .tooltip-content, .tooltip[data-tip]:before {
    transform: translateX(-50%) translateY(var(--tt-pos, 0.25rem));
    inset: auto auto var(--tt-off) 50%;
  }
  .tooltip:after {
    transform: translateX(-50%) translateY(var(--tt-pos, 0.25rem));
    inset: auto auto var(--tt-tail) 50%;
  }
  .tab {
    position: relative;
    display: inline-flex;
    cursor: pointer;
    appearance: none;
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
    text-align: center;
    webkit-user-select: none;
    user-select: none;
  }
  @media (hover: hover) {
    .tab:hover {
      color: var(--color-base-content);
    }
  }
  .tab {
    --tab-p: 1rem;
    --tab-bg: var(--color-base-100);
    --tab-border-color: var(--color-base-300);
    --tab-radius-ss: 0;
    --tab-radius-se: 0;
    --tab-radius-es: 0;
    --tab-radius-ee: 0;
    --tab-order: 0;
    --tab-radius-min: calc(0.75rem - var(--border));
    border-color: #0000;
    order: var(--tab-order);
    height: var(--tab-height);
    font-size: 0.875rem;
    padding-inline-start: var(--tab-p);
    padding-inline-end: var(--tab-p);
  }
  .tab:is(input[type="radio"]) {
    min-width: fit-content;
  }
  .tab:is(input[type="radio"]):after {
    content: attr(aria-label);
  }
  .tab:is(label) {
    position: relative;
  }
  .tab:is(label) input {
    position: absolute;
    inset: calc(0.25rem * 0);
    cursor: pointer;
    appearance: none;
    opacity: 0%;
  }
  .tab:checked + .tab-content, .tab:is(label:has(:checked)) + .tab-content, .tab:is(.tab-active, [aria-selected=true], [aria-current=true], [aria-current=page]) + .tab-content {
    display: block;
    height: calc(100% - var(--tab-height) + var(--border));
  }
  .tab:not(:checked, label:has(:checked), :hover, .tab-active, [aria-selected=true], [aria-current=true], [aria-current=page]) {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .tab:not(:checked, label:has(:checked), :hover, .tab-active, [aria-selected=true], [aria-current=true], [aria-current=page]) {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }
  .tab:not(input):empty {
    flex-grow: 1;
    cursor: default;
  }
  .tab:focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .tab:focus {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .tab:focus-visible, .tab:is(label:has(:checked:focus-visible)) {
    outline: 2px solid currentColor;
    outline-offset: -5px;
  }
  .tab[disabled] {
    pointer-events: none;
    opacity: 40%;
  }
  .menu {
    display: flex;
    width: fit-content;
    flex-direction: column;
    flex-wrap: wrap;
    padding: calc(0.25rem * 2);
    --menu-active-fg: var(--color-neutral-content);
    --menu-active-bg: var(--color-neutral);
    font-size: 0.875rem;
  }
  .menu :where(li ul) {
    position: relative;
    margin-inline-start: calc(0.25rem * 4);
    padding-inline-start: calc(0.25rem * 2);
    white-space: nowrap;
  }
  .menu :where(li ul):before {
    position: absolute;
    inset-inline-start: calc(0.25rem * 0);
    top: calc(0.25rem * 3);
    bottom: calc(0.25rem * 3);
    background-color: var(--color-base-content);
    opacity: 10%;
    width: var(--border);
    content: "";
  }
  .menu :where(li > .menu-dropdown:not(.menu-dropdown-show)) {
    display: none;
  }
  .menu :where(li:not(.menu-title) > *:not(ul, details, .menu-title, .btn)), .menu :where(li:not(.menu-title) > details > summary:not(.menu-title)) {
    display: grid;
    grid-auto-flow: column;
    align-content: flex-start;
    align-items: center;
    gap: calc(0.25rem * 2);
    border-radius: var(--radius-field);
    padding-inline: calc(0.25rem * 3);
    padding-block: calc(0.25rem * 1.5);
    text-align: start;
    transition-property: color, background-color, box-shadow;
    transition-duration: 0.2s;
    transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
    grid-auto-columns: minmax(auto, max-content) auto max-content;
    text-wrap: balance;
    user-select: none;
  }
  .menu :where(li > details > summary) {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .menu :where(li > details > summary) {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .menu :where(li > details > summary)::-webkit-details-marker {
    display: none;
  }
  .menu :where(li > details > summary):after, .menu :where(li > .menu-dropdown-toggle):after {
    justify-self: flex-end;
    display: block;
    height: 0.375rem;
    width: 0.375rem;
    rotate: -135deg;
    translate: 0 -1px;
    transition-property: rotate, translate;
    transition-duration: 0.2s;
    content: "";
    transform-origin: 50% 50%;
    box-shadow: 2px 2px inset;
    pointer-events: none;
  }
  .menu :where(li > details[open] > summary):after, .menu :where(li > .menu-dropdown-toggle.menu-dropdown-show):after {
    rotate: 45deg;
    translate: 0 1px;
  }
  .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn).menu-focus, .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn):focus-visible {
    cursor: pointer;
    background-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn).menu-focus, .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn):focus-visible {
      background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
    }
  }
  .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn).menu-focus, .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn):focus-visible {
    color: var(--color-base-content);
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn).menu-focus, .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title), li:not(.menu-title, .disabled) > details > summary:not(.menu-title) ):not(.menu-active, :active, .btn):focus-visible {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover ) {
    cursor: pointer;
    background-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover ) {
      background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
    }
  }
  .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover ) {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover ) {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .menu :where( li:not(.menu-title, .disabled) > *:not(ul, details, .menu-title):not(.menu-active, :active, .btn):hover, li:not(.menu-title, .disabled) > details > summary:not(.menu-title):not(.menu-active, :active, .btn):hover ) {
    box-shadow: 0 1px oklch(0% 0 0 / 0.01) inset, 0 -1px oklch(100% 0 0 / 0.01) inset;
  }
  .menu :where(li:empty) {
    background-color: var(--color-base-content);
    opacity: 10%;
    margin: 0.5rem 1rem;
    height: 1px;
  }
  .menu :where(li) {
    position: relative;
    display: flex;
    flex-shrink: 0;
    flex-direction: column;
    flex-wrap: wrap;
    align-items: stretch;
  }
  .menu :where(li) .badge {
    justify-self: flex-end;
  }
  .menu :where(li) > *:not(ul, .menu-title, details, .btn):active, .menu :where(li) > *:not(ul, .menu-title, details, .btn).menu-active, .menu :where(li) > details > summary:active {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .menu :where(li) > *:not(ul, .menu-title, details, .btn):active, .menu :where(li) > *:not(ul, .menu-title, details, .btn).menu-active, .menu :where(li) > details > summary:active {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .menu :where(li) > *:not(ul, .menu-title, details, .btn):active, .menu :where(li) > *:not(ul, .menu-title, details, .btn).menu-active, .menu :where(li) > details > summary:active {
    color: var(--menu-active-fg);
    background-color: var(--menu-active-bg);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
  }
  .menu :where(li) > *:not(ul, .menu-title, details, .btn):active:not(.menu :where(li) > *:not(ul, .menu-title, details, .btn):active:active), .menu :where(li) > *:not(ul, .menu-title, details, .btn).menu-active:not(.menu :where(li) > *:not(ul, .menu-title, details, .btn).menu-active:active), .menu :where(li) > details > summary:active:not(.menu :where(li) > details > summary:active:active) {
    box-shadow: 0 2px calc(var(--depth) * 3px) -2px var(--menu-active-bg);
  }
  .menu :where(li).menu-disabled {
    pointer-events: none;
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .menu :where(li).menu-disabled {
      color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .menu .dropdown:focus-within .menu-dropdown-toggle:after {
    rotate: 45deg;
    translate: 0 1px;
  }
  .menu .dropdown-content {
    margin-top: calc(0.25rem * 2);
    padding: calc(0.25rem * 2);
  }
  .menu .dropdown-content:before {
    display: none;
  }
  .dropdown {
    position: relative;
    display: inline-block;
    position-area: var(--anchor-v, bottom) var(--anchor-h, span-right);
  }
  .dropdown > *:not(summary):focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .dropdown > *:not(summary):focus {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .dropdown .dropdown-content {
    position: absolute;
  }
  .dropdown:not(details, .dropdown-open, .dropdown-hover:hover, :focus-within) .dropdown-content {
    display: none;
    transform-origin: top;
    opacity: 0%;
    scale: 95%;
  }
  .dropdown[popover], .dropdown .dropdown-content {
    z-index: 999;
  }
  @media (prefers-reduced-motion: no-preference) {
    .dropdown[popover], .dropdown .dropdown-content {
      animation: dropdown 0.2s;
      transition-property: opacity, scale, display;
      transition-behavior: allow-discrete;
      transition-duration: 0.2s;
      transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    }
  }
  @starting-style {
    .dropdown[popover], .dropdown .dropdown-content {
      scale: 95%;
      opacity: 0;
    }
  }
  .dropdown.dropdown-open > [tabindex]:first-child, .dropdown:not(.dropdown-hover):focus > [tabindex]:first-child, .dropdown:focus-within > [tabindex]:first-child {
    pointer-events: none;
  }
  .dropdown.dropdown-open .dropdown-content, .dropdown:not(.dropdown-hover):focus .dropdown-content, .dropdown:focus-within .dropdown-content {
    opacity: 100%;
  }
  .dropdown.dropdown-hover:hover .dropdown-content {
    opacity: 100%;
    scale: 100%;
  }
  .dropdown:is(details) summary::-webkit-details-marker {
    display: none;
  }
  .dropdown.dropdown-open .dropdown-content, .dropdown:focus .dropdown-content, .dropdown:focus-within .dropdown-content {
    scale: 100%;
  }
  .dropdown:where([popover]) {
    background: #0000;
  }
  .dropdown[popover] {
    position: fixed;
    color: inherit;
  }
  @supports not (position-area: bottom) {
    .dropdown[popover] {
      margin: auto;
    }
    .dropdown[popover].dropdown-open:not(:popover-open) {
      display: none;
      transform-origin: top;
      opacity: 0%;
      scale: 95%;
    }
    .dropdown[popover]::backdrop {
      background-color: color-mix(in oklab, #000 30%, #0000);
    }
  }
  .dropdown[popover]:not(.dropdown-open, :popover-open) {
    display: none;
    transform-origin: top;
    opacity: 0%;
    scale: 95%;
  }
  .loading {
    pointer-events: none;
    display: inline-block;
    aspect-ratio: 1 / 1;
    background-color: currentColor;
    vertical-align: middle;
    width: calc(var(--size-selector, 0.25rem) * 6);
    mask-size: 100%;
    mask-repeat: no-repeat;
    mask-position: center;
    mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='black' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cg transform-origin='center'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3' stroke-linecap='round'%3E%3CanimateTransform attributeName='transform' type='rotate' from='0 12 12' to='360 12 12' dur='2s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dasharray' values='0,150;42,150;42,150' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3Canimate attributeName='stroke-dashoffset' values='0;-16;-59' keyTimes='0;0.475;1' dur='1.5s' repeatCount='indefinite'/%3E%3C/circle%3E%3C/g%3E%3C/svg%3E");
  }
  .collapse:not(td, tr, colgroup) {
    visibility: visible;
  }
  .collapse {
    position: relative;
    display: grid;
    overflow: hidden;
    border-radius: var(--radius-box, 1rem);
    width: 100%;
    grid-template-rows: max-content 0fr;
    isolation: isolate;
  }
  @media (prefers-reduced-motion: no-preference) {
    .collapse {
      transition: grid-template-rows 0.2s;
    }
  }
  .collapse > input:is([type="checkbox"], [type="radio"]) {
    grid-column-start: 1;
    grid-row-start: 1;
    appearance: none;
    opacity: 0;
    z-index: 1;
    width: 100%;
    padding: 1rem;
    padding-inline-end: 3rem;
    min-height: 1lh;
    transition: background-color 0.2s ease-out;
  }
  .collapse:is([open], :focus:not(.collapse-close)), .collapse:not(.collapse-close):has(> input:is([type="checkbox"], [type="radio"]):checked) {
    grid-template-rows: max-content 1fr;
  }
  .collapse:is([open], :focus:not(.collapse-close)) > .collapse-content, .collapse:not(.collapse-close) > :where(input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-content) {
    visibility: visible;
    min-height: fit-content;
  }
  .collapse:focus-visible, .collapse:has(> input:is([type="checkbox"], [type="radio"]):focus-visible) {
    outline-color: var(--color-base-content);
    outline-style: solid;
    outline-width: 2px;
    outline-offset: 2px;
  }
  .collapse:not(.collapse-close) > input[type="checkbox"], .collapse:not(.collapse-close) > input[type="radio"]:not(:checked), .collapse:not(.collapse-close) > .collapse-title {
    cursor: pointer;
  }
  .collapse:focus:not(.collapse-close, .collapse[open]) > .collapse-title {
    cursor: unset;
  }
  .collapse:is([open], :focus:not(.collapse-close)) > :where(.collapse-content), .collapse:not(.collapse-close) > :where(input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-content) {
    padding-bottom: 1rem;
  }
  @media (prefers-reduced-motion: no-preference) {
    .collapse:is([open], :focus:not(.collapse-close)) > :where(.collapse-content), .collapse:not(.collapse-close) > :where(input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-content) {
      transition: padding 0.2s ease-out, background-color 0.2s ease-out;
    }
  }
  @media (prefers-reduced-motion: no-preference) {
    .collapse:is([open]).collapse-arrow > .collapse-title:after {
      transform: translateY(-50%) rotate(225deg);
    }
  }
  @media (prefers-reduced-motion: no-preference) {
    .collapse.collapse-open.collapse-arrow > .collapse-title:after {
      transform: translateY(-50%) rotate(225deg);
    }
  }
  .collapse.collapse-open.collapse-plus > .collapse-title:after {
    content: "−";
  }
  .collapse.collapse-arrow:focus:not(.collapse-close) > .collapse-title:after {
    transform: translateY(-50%) rotate(225deg);
  }
  .collapse.collapse-arrow:not(.collapse-close) > input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-title:after {
    transform: translateY(-50%) rotate(225deg);
  }
  .collapse[open].collapse-plus > .collapse-title:after {
    content: "−";
  }
  .collapse.collapse-plus:focus:not(.collapse-close) > .collapse-title:after {
    content: "−";
  }
  .collapse.collapse-plus:not(.collapse-close) > input:is([type="checkbox"], [type="radio"]):checked ~ .collapse-title:after {
    content: "−";
  }
  .collapse:is(details) {
    width: 100%;
  }
  .collapse:is(details) summary {
    position: relative;
    display: block;
  }
  .collapse:is(details) summary::-webkit-details-marker {
    display: none;
  }
  .collapse:is(details) summary {
    outline: none;
  }
  .validator:user-valid, .validator:user-valid:focus, .validator:user-valid:checked, .validator:user-valid[aria-checked="true"], .validator:user-valid:focus-within, .validator:has(:user-valid), .validator:has(:user-valid):focus, .validator:has(:user-valid):checked, .validator:has(:user-valid)[aria-checked="true"], .validator:has(:user-valid):focus-within {
    --input-color: var(--color-success);
  }
  .validator:user-invalid, .validator:user-invalid:focus, .validator:user-invalid:checked, .validator:user-invalid[aria-checked="true"], .validator:user-invalid:focus-within, .validator:has(:user-invalid), .validator:has(:user-invalid):focus, .validator:has(:user-invalid):checked, .validator:has(:user-invalid)[aria-checked="true"], .validator:has(:user-invalid):focus-within, .validator[aria-invalid]:not([aria-invalid="false"]), .validator[aria-invalid]:not([aria-invalid="false"]):focus, .validator[aria-invalid]:not([aria-invalid="false"]):checked, .validator[aria-invalid]:not([aria-invalid="false"])[aria-checked="true"], .validator[aria-invalid]:not([aria-invalid="false"]):focus-within {
    --input-color: var(--color-error);
  }
  .validator:user-invalid ~ .validator-hint, .validator:has(:user-invalid) ~ .validator-hint, .validator[aria-invalid]:not([aria-invalid="false"]) ~ .validator-hint {
    visibility: visible;
    display: block;
    color: var(--color-error);
  }
  .collapse {
    visibility: collapse;
  }
  .invisible {
    visibility: hidden;
  }
  .visible {
    visibility: visible;
  }
  .list {
    display: flex;
    flex-direction: column;
    font-size: 0.875rem;
  }
  .list :where(.list-row) {
    --list-grid-cols: minmax(0, auto) 1fr;
    position: relative;
    display: grid;
    grid-auto-flow: column;
    gap: calc(0.25rem * 4);
    border-radius: var(--radius-box);
    padding: calc(0.25rem * 4);
    word-break: break-word;
    grid-template-columns: var(--list-grid-cols);
  }
  .list :where(.list-row):has(.list-col-grow:nth-child(1)) {
    --list-grid-cols: 1fr;
  }
  .list :where(.list-row):has(.list-col-grow:nth-child(2)) {
    --list-grid-cols: minmax(0, auto) 1fr;
  }
  .list :where(.list-row):has(.list-col-grow:nth-child(3)) {
    --list-grid-cols: minmax(0, auto) minmax(0, auto) 1fr;
  }
  .list :where(.list-row):has(.list-col-grow:nth-child(4)) {
    --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
  }
  .list :where(.list-row):has(.list-col-grow:nth-child(5)) {
    --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto) 1fr;
  }
  .list :where(.list-row):has(.list-col-grow:nth-child(6)) {
    --list-grid-cols: minmax(0, auto) minmax(0, auto) minmax(0, auto) minmax(0, auto)
        minmax(0, auto) 1fr;
  }
  .list :where(.list-row) :not(.list-col-wrap) {
    grid-row-start: 1;
  }
  .list > :not(:last-child).list-row:after, .list > :not(:last-child) .list-row:after {
    content: "";
    border-bottom: var(--border) solid;
    inset-inline: var(--radius-box);
    position: absolute;
    bottom: calc(0.25rem * 0);
    border-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .list > :not(:last-child).list-row:after, .list > :not(:last-child) .list-row:after {
      border-color: color-mix(in oklab, var(--color-base-content) 5%, transparent);
    }
  }
  .toast {
    position: fixed;
    inset-inline-start: auto;
    inset-inline-end: calc(0.25rem * 4);
    top: auto;
    bottom: calc(0.25rem * 4);
    display: flex;
    flex-direction: column;
    gap: calc(0.25rem * 2);
    background-color: transparent;
    translate: var(--toast-x, 0) var(--toast-y, 0);
    width: max-content;
    max-width: calc(100vw - 2rem);
  }
  @media (prefers-reduced-motion: no-preference) {
    .toast > * {
      animation: toast 0.25s ease-out;
    }
  }
  .toast:where(.toast-start) {
    inset-inline-start: calc(0.25rem * 4);
    inset-inline-end: auto;
    --toast-x: 0;
  }
  .toast:where(.toast-center) {
    inset-inline-start: calc(1/2 * 100%);
    inset-inline-end: calc(1/2 * 100%);
    --toast-x: -50%;
  }
  .toast:where(.toast-end) {
    inset-inline-start: auto;
    inset-inline-end: calc(0.25rem * 4);
    --toast-x: 0;
  }
  .toast:where(.toast-bottom) {
    top: auto;
    bottom: calc(0.25rem * 4);
    --toast-y: 0;
  }
  .toast:where(.toast-middle) {
    top: calc(1/2 * 100%);
    bottom: auto;
    --toast-y: -50%;
  }
  .toast:where(.toast-top) {
    top: calc(0.25rem * 4);
    bottom: auto;
    --toast-y: 0;
  }
  .toggle {
    border: var(--border) solid currentColor;
    color: var(--input-color);
    position: relative;
    display: inline-grid;
    flex-shrink: 0;
    cursor: pointer;
    appearance: none;
    place-content: center;
    vertical-align: middle;
    webkit-user-select: none;
    user-select: none;
    grid-template-columns: 0fr 1fr 1fr;
    --radius-selector-max: calc(
    var(--radius-selector) + var(--radius-selector) + var(--radius-selector)
  );
    border-radius: calc( var(--radius-selector) + min(var(--toggle-p), var(--radius-selector-max)) + min(var(--border), var(--radius-selector-max)) );
    padding: var(--toggle-p);
    box-shadow: 0 1px currentColor inset;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .toggle {
      box-shadow: 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000) inset;
    }
  }
  .toggle {
    transition: color 0.3s, grid-template-columns 0.2s;
    --input-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .toggle {
      --input-color: color-mix(in oklab, var(--color-base-content) 50%, #0000);
    }
  }
  .toggle {
    --toggle-p: calc(var(--size) * 0.125);
    --size: calc(var(--size-selector, 0.25rem) * 6);
    width: calc((var(--size) * 2) - (var(--border) + var(--toggle-p)) * 2);
    height: var(--size);
  }
  .toggle > * {
    z-index: 1;
    grid-column: span 1 / span 1;
    grid-column-start: 2;
    grid-row-start: 1;
    height: 100%;
    cursor: pointer;
    appearance: none;
    background-color: transparent;
    padding: calc(0.25rem * 0.5);
    transition: opacity 0.2s, rotate 0.4s;
    border: none;
  }
  .toggle > *:focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .toggle > *:focus {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .toggle > *:nth-child(2) {
    color: var(--color-base-100);
    rotate: 0deg;
  }
  .toggle > *:nth-child(3) {
    color: var(--color-base-100);
    opacity: 0%;
    rotate: -15deg;
  }
  .toggle:has(:checked) > :nth-child(2) {
    opacity: 0%;
    rotate: 15deg;
  }
  .toggle:has(:checked) > :nth-child(3) {
    opacity: 100%;
    rotate: 0deg;
  }
  .toggle:before {
    position: relative;
    inset-inline-start: calc(0.25rem * 0);
    grid-column-start: 2;
    grid-row-start: 1;
    aspect-ratio: 1 / 1;
    height: 100%;
    border-radius: var(--radius-selector);
    background-color: currentColor;
    translate: 0;
    --tw-content: "";
    content: var(--tw-content);
    transition: background-color 0.1s, translate 0.2s, inset-inline-start 0.2s;
    box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px currentColor;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .toggle:before {
      box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000);
    }
  }
  .toggle:before {
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
  }
  @media (forced-colors: active) {
    .toggle:before {
      outline-style: var(--tw-outline-style);
      outline-width: 1px;
      outline-offset: calc(1px * -1);
    }
  }
  @media print {
    .toggle:before {
      outline: 0.25rem solid;
      outline-offset: -1rem;
    }
  }
  .toggle:focus-visible, .toggle:has(:focus-visible) {
    outline: 2px solid currentColor;
    outline-offset: 2px;
  }
  .toggle:checked, .toggle[aria-checked="true"], .toggle:has(> input:checked) {
    grid-template-columns: 1fr 1fr 0fr;
    background-color: var(--color-base-100);
    --input-color: var(--color-base-content);
  }
  .toggle:checked:before, .toggle[aria-checked="true"]:before, .toggle:has(> input:checked):before {
    background-color: currentColor;
  }
  @starting-style {
    .toggle:checked:before, .toggle[aria-checked="true"]:before, .toggle:has(> input:checked):before {
      opacity: 0;
    }
  }
  .toggle:indeterminate {
    grid-template-columns: 0.5fr 1fr 0.5fr;
  }
  .toggle:disabled {
    cursor: not-allowed;
    opacity: 30%;
  }
  .toggle:disabled:before {
    background-color: transparent;
    border: var(--border) solid currentColor;
  }
  .input {
    cursor: text;
    border: var(--border) solid #0000;
    position: relative;
    display: inline-flex;
    flex-shrink: 1;
    appearance: none;
    align-items: center;
    gap: calc(0.25rem * 2);
    background-color: var(--color-base-100);
    padding-inline: calc(0.25rem * 3);
    vertical-align: middle;
    white-space: nowrap;
    width: clamp(3rem, 20rem, 100%);
    height: var(--size);
    font-size: 0.875rem;
    touch-action: manipulation;
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    border-color: var(--input-color);
    box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .input {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    }
  }
  .input {
    --size: calc(var(--size-field, 0.25rem) * 10);
    --input-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .input {
      --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }
  }
  .input:where(input) {
    display: inline-flex;
  }
  .input :where(input) {
    display: inline-flex;
    height: 100%;
    width: 100%;
    appearance: none;
    background-color: transparent;
    border: none;
  }
  .input :where(input):focus, .input :where(input):focus-within {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .input :where(input):focus, .input :where(input):focus-within {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .input :where(input[type="url"]), .input :where(input[type="email"]) {
    direction: ltr;
  }
  .input :where(input[type="date"]) {
    display: inline-flex;
  }
  .input:focus, .input:focus-within {
    --input-color: var(--color-base-content);
    box-shadow: 0 1px var(--input-color);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .input:focus, .input:focus-within {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
    }
  }
  .input:focus, .input:focus-within {
    outline: 2px solid var(--input-color);
    outline-offset: 2px;
    isolation: isolate;
    z-index: 1;
  }
  .input:has(> input[disabled]), .input:is(:disabled, [disabled]), fieldset:disabled .input {
    cursor: not-allowed;
    border-color: var(--color-base-200);
    background-color: var(--color-base-200);
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .input:has(> input[disabled]), .input:is(:disabled, [disabled]), fieldset:disabled .input {
      color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
    }
  }
  .input:has(> input[disabled])::placeholder, .input:is(:disabled, [disabled])::placeholder, fieldset:disabled .input::placeholder {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .input:has(> input[disabled])::placeholder, .input:is(:disabled, [disabled])::placeholder, fieldset:disabled .input::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .input:has(> input[disabled]), .input:is(:disabled, [disabled]), fieldset:disabled .input {
    box-shadow: none;
  }
  .input:has(> input[disabled]) > input[disabled] {
    cursor: not-allowed;
  }
  .input::-webkit-date-and-time-value {
    text-align: inherit;
  }
  .input[type="number"]::-webkit-inner-spin-button {
    margin-block: calc(0.25rem * -3);
    margin-inline-end: calc(0.25rem * -3);
  }
  .input::-webkit-calendar-picker-indicator {
    position: absolute;
    inset-inline-end: 0.75em;
  }
  .input:has(> input[type="date"]) :where(input[type="date"]) {
    display: inline-flex;
    webkit-appearance: none;
    appearance: none;
  }
  .input:has(> input[type="date"]) input[type="date"]::-webkit-calendar-picker-indicator {
    position: absolute;
    inset-inline-end: 0.75em;
    width: 1em;
    height: 1em;
    cursor: pointer;
  }
  .indicator {
    position: relative;
    display: inline-flex;
    width: max-content;
  }
  .indicator :where(.indicator-item) {
    z-index: 1;
    position: absolute;
    white-space: nowrap;
    top: var(--indicator-t, 0);
    bottom: var(--indicator-b, auto);
    left: var(--indicator-s, auto);
    right: var(--indicator-e, 0);
    translate: var(--indicator-x, 50%) var(--indicator-y, -50%);
  }
  .table {
    font-size: 0.875rem;
    position: relative;
    width: 100%;
    border-radius: var(--radius-box);
    text-align: left;
  }
  .table:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
    text-align: right;
  }
  @media (hover: hover) {
    .table tr.row-hover:hover, .table tr.row-hover:nth-child(even):hover {
      background-color: var(--color-base-200);
    }
  }
  .table :where(th, td) {
    padding-inline: calc(0.25rem * 4);
    padding-block: calc(0.25rem * 3);
    vertical-align: middle;
  }
  .table :where(thead, tfoot) {
    white-space: nowrap;
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .table :where(thead, tfoot) {
      color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
    }
  }
  .table :where(thead, tfoot) {
    font-size: 0.875rem;
    font-weight: 600;
  }
  .table :where(tfoot) {
    border-top: var(--border) solid var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .table :where(tfoot) {
      border-top: var(--border) solid color-mix(in oklch, var(--color-base-content) 5%, #0000);
    }
  }
  .table :where(.table-pin-rows thead tr) {
    position: sticky;
    top: calc(0.25rem * 0);
    z-index: 1;
    background-color: var(--color-base-100);
  }
  .table :where(.table-pin-rows tfoot tr) {
    position: sticky;
    bottom: calc(0.25rem * 0);
    z-index: 1;
    background-color: var(--color-base-100);
  }
  .table :where(.table-pin-cols tr th) {
    position: sticky;
    right: calc(0.25rem * 0);
    left: calc(0.25rem * 0);
    background-color: var(--color-base-100);
  }
  .table :where(thead tr, tbody tr:not(:last-child)) {
    border-bottom: var(--border) solid var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .table :where(thead tr, tbody tr:not(:last-child)) {
      border-bottom: var(--border) solid color-mix(in oklch, var(--color-base-content) 5%, #0000);
    }
  }
  .steps {
    display: inline-grid;
    grid-auto-flow: column;
    overflow: hidden;
    overflow-x: auto;
    counter-reset: step;
    grid-auto-columns: 1fr;
  }
  .steps .step {
    display: grid;
    grid-template-columns: repeat(1, minmax(0, 1fr));
    grid-template-columns: auto;
    grid-template-rows: repeat(2, minmax(0, 1fr));
    grid-template-rows: 40px 1fr;
    place-items: center;
    text-align: center;
    min-width: 4rem;
    --step-bg: var(--color-base-300);
    --step-fg: var(--color-base-content);
  }
  .steps .step:before {
    top: calc(0.25rem * 0);
    grid-column-start: 1;
    grid-row-start: 1;
    height: calc(0.25rem * 2);
    width: 100%;
    border: 1px solid;
    color: var(--step-bg);
    background-color: var(--step-bg);
    --tw-content: "";
    content: var(--tw-content);
    margin-inline-start: -100%;
  }
  .steps .step > .step-icon, .steps .step:not(:has(.step-icon)):after {
    content: counter(step);
    counter-increment: step;
    z-index: 1;
    color: var(--step-fg);
    background-color: var(--step-bg);
    border: 1px solid var(--step-bg);
    position: relative;
    grid-column-start: 1;
    grid-row-start: 1;
    display: grid;
    height: calc(0.25rem * 8);
    width: calc(0.25rem * 8);
    place-items: center;
    place-self: center;
    border-radius: calc(infinity * 1px);
  }
  .steps .step:first-child:before {
    content: none;
  }
  .steps .step[data-content]:after {
    content: attr(data-content);
  }
  .steps .step-neutral + .step-neutral:before, .steps .step-neutral:after, .steps .step-neutral > .step-icon {
    --step-bg: var(--color-neutral);
    --step-fg: var(--color-neutral-content);
  }
  .steps .step-primary + .step-primary:before, .steps .step-primary:after, .steps .step-primary > .step-icon {
    --step-bg: var(--color-primary);
    --step-fg: var(--color-primary-content);
  }
  .steps .step-secondary + .step-secondary:before, .steps .step-secondary:after, .steps .step-secondary > .step-icon {
    --step-bg: var(--color-secondary);
    --step-fg: var(--color-secondary-content);
  }
  .steps .step-accent + .step-accent:before, .steps .step-accent:after, .steps .step-accent > .step-icon {
    --step-bg: var(--color-accent);
    --step-fg: var(--color-accent-content);
  }
  .steps .step-info + .step-info:before, .steps .step-info:after, .steps .step-info > .step-icon {
    --step-bg: var(--color-info);
    --step-fg: var(--color-info-content);
  }
  .steps .step-success + .step-success:before, .steps .step-success:after, .steps .step-success > .step-icon {
    --step-bg: var(--color-success);
    --step-fg: var(--color-success-content);
  }
  .steps .step-warning + .step-warning:before, .steps .step-warning:after, .steps .step-warning > .step-icon {
    --step-bg: var(--color-warning);
    --step-fg: var(--color-warning-content);
  }
  .steps .step-error + .step-error:before, .steps .step-error:after, .steps .step-error > .step-icon {
    --step-bg: var(--color-error);
    --step-fg: var(--color-error-content);
  }
  .range {
    appearance: none;
    webkit-appearance: none;
    --range-thumb: var(--color-base-100);
    --range-thumb-size: calc(var(--size-selector, 0.25rem) * 6);
    --range-progress: currentColor;
    --range-fill: 1;
    --range-p: 0.25rem;
    --range-bg: currentColor;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .range {
      --range-bg: color-mix(in oklab, currentColor 10%, #0000);
    }
  }
  .range {
    cursor: pointer;
    overflow: hidden;
    background-color: transparent;
    vertical-align: middle;
    width: clamp(3rem, 20rem, 100%);
    --radius-selector-max: calc(
    var(--radius-selector) + var(--radius-selector) + var(--radius-selector)
  );
    border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
    border: none;
    height: var(--range-thumb-size);
  }
  [dir="rtl"] .range {
    --range-dir: -1;
  }
  .range:focus {
    outline: none;
  }
  .range:focus-visible {
    outline: 2px solid;
    outline-offset: 2px;
  }
  .range::-webkit-slider-runnable-track {
    width: 100%;
    background-color: var(--range-bg);
    border-radius: var(--radius-selector);
    height: calc(var(--range-thumb-size) * 0.5);
  }
  @media (forced-colors: active) {
    .range::-webkit-slider-runnable-track {
      border: 1px solid;
    }
  }
  @media (forced-colors: active) {
    .range::-moz-range-track {
      border: 1px solid;
    }
  }
  .range::-webkit-slider-thumb {
    position: relative;
    box-sizing: border-box;
    border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
    background-color: currentColor;
    height: var(--range-thumb-size);
    width: var(--range-thumb-size);
    border: var(--range-p) solid;
    appearance: none;
    webkit-appearance: none;
    top: 50%;
    color: var(--range-progress);
    transform: translateY(-50%);
    box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px currentColor, 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .range::-webkit-slider-thumb {
      box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000), 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
    }
  }
  .range::-moz-range-track {
    width: 100%;
    background-color: var(--range-bg);
    border-radius: var(--radius-selector);
    height: calc(var(--range-thumb-size) * 0.5);
  }
  .range::-moz-range-thumb {
    position: relative;
    box-sizing: border-box;
    border-radius: calc(var(--radius-selector) + min(var(--range-p), var(--radius-selector-max)));
    background-color: currentColor;
    height: var(--range-thumb-size);
    width: var(--range-thumb-size);
    border: var(--range-p) solid;
    top: 50%;
    color: var(--range-progress);
    box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px currentColor, 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .range::-moz-range-thumb {
      box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000), 0 0 0 2rem var(--range-thumb) inset, calc((var(--range-dir, 1) * -100rem) - (var(--range-dir, 1) * var(--range-thumb-size) / 2)) 0 0 calc(100rem * var(--range-fill));
    }
  }
  .range:disabled {
    cursor: not-allowed;
    opacity: 30%;
  }
  .select {
    border: var(--border) solid #0000;
    position: relative;
    display: inline-flex;
    flex-shrink: 1;
    appearance: none;
    align-items: center;
    gap: calc(0.25rem * 1.5);
    background-color: var(--color-base-100);
    padding-inline-start: calc(0.25rem * 3);
    padding-inline-end: calc(0.25rem * 7);
    vertical-align: middle;
    width: clamp(3rem, 20rem, 100%);
    height: var(--size);
    font-size: 0.875rem;
    touch-action: manipulation;
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    background-image: linear-gradient(45deg, #0000 50%, currentColor 50%), linear-gradient(135deg, currentColor 50%, #0000 50%);
    background-position: calc(100% - 20px) calc(1px + 50%), calc(100% - 16.1px) calc(1px + 50%);
    background-size: 4px 4px, 4px 4px;
    background-repeat: no-repeat;
    text-overflow: ellipsis;
    box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    }
  }
  .select {
    border-color: var(--input-color);
    --input-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select {
      --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }
  }
  .select {
    --size: calc(var(--size-field, 0.25rem) * 10);
  }
  [dir="rtl"] .select {
    background-position: calc(0% + 12px) calc(1px + 50%), calc(0% + 16px) calc(1px + 50%);
  }
  .select select {
    margin-inline-start: calc(0.25rem * -3);
    margin-inline-end: calc(0.25rem * -7);
    width: calc(100% + 2.75rem);
    appearance: none;
    padding-inline-start: calc(0.25rem * 3);
    padding-inline-end: calc(0.25rem * 7);
    height: calc(100% - calc(var(--border) * 2));
    align-items: center;
    background: inherit;
    border-radius: inherit;
    border-style: none;
  }
  .select select:focus, .select select:focus-within {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .select select:focus, .select select:focus-within {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .select select:not(:last-child) {
    margin-inline-end: calc(0.25rem * -5.5);
    background-image: none;
  }
  .select:focus, .select:focus-within {
    --input-color: var(--color-base-content);
    box-shadow: 0 1px var(--input-color);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select:focus, .select:focus-within {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
    }
  }
  .select:focus, .select:focus-within {
    outline: 2px solid var(--input-color);
    outline-offset: 2px;
    isolation: isolate;
    z-index: 1;
  }
  .select:has(> select[disabled]), .select:is(:disabled, [disabled]), fieldset:disabled .select {
    cursor: not-allowed;
    border-color: var(--color-base-200);
    background-color: var(--color-base-200);
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select:has(> select[disabled]), .select:is(:disabled, [disabled]), fieldset:disabled .select {
      color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
    }
  }
  .select:has(> select[disabled])::placeholder, .select:is(:disabled, [disabled])::placeholder, fieldset:disabled .select::placeholder {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select:has(> select[disabled])::placeholder, .select:is(:disabled, [disabled])::placeholder, fieldset:disabled .select::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .select:has(> select[disabled]) > select[disabled] {
    cursor: not-allowed;
  }
  @supports (appearance: base-select) {
    .select, .select select {
      appearance: base-select;
    }
  }
  @supports (appearance: base-select) {
    .select::picker(select), .select select::picker(select) {
      appearance: base-select;
    }
  }
  .select::picker(select), .select select::picker(select) {
    color: inherit;
    max-height: min(24rem, 70dvh);
    border: var(--border) solid var(--color-base-200);
    margin-block: calc(0.25rem * 2);
    border-radius: var(--radius-box);
    padding: calc(0.25rem * 2);
    background-color: inherit;
    box-shadow: 0 2px calc(var(--depth) * 3px) -2px oklch(0% 0 0/0.2);
    box-shadow: 0 20px 25px -5px rgb(0 0 0 / calc(var(--depth) * 0.1)), 0 8px 10px -6px rgb(0 0 0 / calc(var(--depth) * 0.1));
  }
  .select::picker-icon, .select select::picker-icon {
    display: none;
  }
  .select optgroup, .select select optgroup {
    padding-top: 0.5em;
  }
  .select optgroup option:nth-child(1), .select select optgroup option:nth-child(1) {
    margin-top: 0.5em;
  }
  .select option, .select select option {
    border-radius: var(--radius-field);
    padding-inline: calc(0.25rem * 3);
    padding-block: calc(0.25rem * 1.5);
    transition-property: color, background-color;
    transition-duration: 0.2s;
    transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
  }
  .select option:not(:disabled):hover, .select option:not(:disabled):focus-visible, .select select option:not(:disabled):hover, .select select option:not(:disabled):focus-visible {
    cursor: pointer;
    background-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .select option:not(:disabled):hover, .select option:not(:disabled):focus-visible, .select select option:not(:disabled):hover, .select select option:not(:disabled):focus-visible {
      background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
    }
  }
  .select option:not(:disabled):hover, .select option:not(:disabled):focus-visible, .select select option:not(:disabled):hover, .select select option:not(:disabled):focus-visible {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .select option:not(:disabled):hover, .select option:not(:disabled):focus-visible, .select select option:not(:disabled):hover, .select select option:not(:disabled):focus-visible {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .select option:not(:disabled):active, .select select option:not(:disabled):active {
    background-color: var(--color-neutral);
    color: var(--color-neutral-content);
    box-shadow: 0 2px calc(var(--depth) * 3px) -2px var(--color-neutral);
  }
  .timeline {
    position: relative;
    display: flex;
  }
  .timeline > li {
    position: relative;
    display: grid;
    flex-shrink: 0;
    align-items: center;
    grid-template-rows: var(--timeline-row-start, minmax(0, 1fr)) auto var( --timeline-row-end, minmax(0, 1fr) );
    grid-template-columns: var(--timeline-col-start, minmax(0, 1fr)) auto var( --timeline-col-end, minmax(0, 1fr) );
  }
  .timeline > li > hr {
    border: none;
    width: 100%;
  }
  .timeline > li > hr:first-child {
    grid-column-start: 1;
    grid-row-start: 2;
  }
  .timeline > li > hr:last-child {
    grid-column-start: 3;
    grid-column-end: none;
    grid-row-start: 2;
    grid-row-end: auto;
  }
  @media print {
    .timeline > li > hr {
      border: 0.1px solid var(--color-base-300);
    }
  }
  .timeline :where(hr) {
    height: calc(0.25rem * 1);
    background-color: var(--color-base-300);
  }
  .timeline:has(.timeline-middle hr):first-child {
    border-start-start-radius: 0;
    border-end-start-radius: 0;
    border-start-end-radius: var(--radius-selector);
    border-end-end-radius: var(--radius-selector);
  }
  .timeline:has(.timeline-middle hr):last-child {
    border-start-start-radius: var(--radius-selector);
    border-end-start-radius: var(--radius-selector);
    border-start-end-radius: 0;
    border-end-end-radius: 0;
  }
  .timeline:not(:has(.timeline-middle)) :first-child hr:last-child {
    border-start-start-radius: var(--radius-selector);
    border-end-start-radius: var(--radius-selector);
    border-start-end-radius: 0;
    border-end-end-radius: 0;
  }
  .timeline:not(:has(.timeline-middle)) :last-child hr:first-child {
    border-start-start-radius: 0;
    border-end-start-radius: 0;
    border-start-end-radius: var(--radius-selector);
    border-end-end-radius: var(--radius-selector);
  }
  .card {
    position: relative;
    display: flex;
    flex-direction: column;
    border-radius: var(--radius-box);
    outline-width: 2px;
    transition: outline 0.2s ease-in-out;
    outline: 0 solid #0000;
    outline-offset: 2px;
  }
  .card:focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .card:focus {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .card:focus-visible {
    outline-color: currentColor;
  }
  .card :where(figure:first-child) {
    overflow: hidden;
    border-start-start-radius: inherit;
    border-start-end-radius: inherit;
    border-end-start-radius: unset;
    border-end-end-radius: unset;
  }
  .card :where(figure:last-child) {
    overflow: hidden;
    border-start-start-radius: unset;
    border-start-end-radius: unset;
    border-end-start-radius: inherit;
    border-end-end-radius: inherit;
  }
  .card:where(.card-border) {
    border: var(--border) solid var(--color-base-200);
  }
  .card:where(.card-dash) {
    border: var(--border) dashed var(--color-base-200);
  }
  .card.image-full {
    display: grid;
  }
  .card.image-full > * {
    grid-column-start: 1;
    grid-row-start: 1;
  }
  .card.image-full > .card-body {
    position: relative;
    color: var(--color-neutral-content);
  }
  .card.image-full :where(figure) {
    overflow: hidden;
    border-radius: inherit;
  }
  .card.image-full > figure img {
    height: 100%;
    object-fit: cover;
    filter: brightness(28%);
  }
  .card figure {
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .card:has(> input:is(input[type="checkbox"], input[type="radio"])) {
    cursor: pointer;
    user-select: none;
  }
  .card:has(> :checked) {
    outline: 2px solid currentColor;
  }
  .swap {
    position: relative;
    display: inline-grid;
    cursor: pointer;
    place-content: center;
    vertical-align: middle;
    webkit-user-select: none;
    user-select: none;
  }
  .swap input {
    appearance: none;
    border: none;
  }
  .swap > * {
    grid-column-start: 1;
    grid-row-start: 1;
  }
  @media (prefers-reduced-motion: no-preference) {
    .swap > * {
      transition-property: transform, rotate, opacity;
      transition-duration: 0.2s;
      transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
    }
  }
  .swap .swap-on, .swap .swap-indeterminate, .swap input:indeterminate ~ .swap-on {
    opacity: 0%;
  }
  .swap input:is(:checked, :indeterminate) ~ .swap-off {
    opacity: 0%;
  }
  .swap input:checked ~ .swap-on, .swap input:indeterminate ~ .swap-indeterminate {
    opacity: 100%;
    backface-visibility: visible;
  }
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip-path: inset(50%);
    white-space: nowrap;
    border-width: 0;
  }
  .checkbox {
    border: var(--border) solid var(--input-color, var(--color-base-content));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .checkbox {
      border: var(--border) solid var(--input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000));
    }
  }
  .checkbox {
    position: relative;
    display: inline-block;
    flex-shrink: 0;
    cursor: pointer;
    appearance: none;
    border-radius: var(--radius-selector);
    padding: calc(0.25rem * 1);
    vertical-align: middle;
    color: var(--color-base-content);
    box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 0 #0000 inset, 0 0 #0000;
    transition: background-color 0.2s, box-shadow 0.2s;
    --size: calc(var(--size-selector, 0.25rem) * 6);
    width: var(--size);
    height: var(--size);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
  }
  .checkbox:before {
    --tw-content: "";
    content: var(--tw-content);
    display: block;
    width: 100%;
    height: 100%;
    rotate: 45deg;
    background-color: currentColor;
    opacity: 0%;
    transition: clip-path 0.3s, opacity 0.1s, rotate 0.3s, translate 0.3s;
    transition-delay: 0.1s;
    clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 70% 80%, 70% 100%);
    box-shadow: 0px 3px 0 0px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    font-size: 1rem;
    line-height: 0.75;
  }
  .checkbox:focus-visible {
    outline: 2px solid var(--input-color, currentColor);
    outline-offset: 2px;
  }
  .checkbox:checked, .checkbox[aria-checked="true"] {
    background-color: var(--input-color, #0000);
    box-shadow: 0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
  }
  .checkbox:checked:before, .checkbox[aria-checked="true"]:before {
    clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 0%, 70% 0%, 70% 100%);
    opacity: 100%;
  }
  @media (forced-colors: active) {
    .checkbox:checked:before, .checkbox[aria-checked="true"]:before {
      rotate: 0deg;
      background-color: transparent;
      --tw-content: "✔︎";
      clip-path: none;
    }
  }
  @media print {
    .checkbox:checked:before, .checkbox[aria-checked="true"]:before {
      rotate: 0deg;
      background-color: transparent;
      --tw-content: "✔︎";
      clip-path: none;
    }
  }
  .checkbox:indeterminate {
    background-color: var(--input-color, var(--color-base-content));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .checkbox:indeterminate {
      background-color: var(--input-color, color-mix(in oklab, var(--color-base-content) 20%, #0000));
    }
  }
  .checkbox:indeterminate:before {
    rotate: 0deg;
    opacity: 100%;
    translate: 0 -35%;
    clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 80% 80%, 80% 100%);
  }
  .checkbox:disabled {
    cursor: not-allowed;
    opacity: 20%;
  }
  .radio {
    position: relative;
    display: inline-block;
    flex-shrink: 0;
    cursor: pointer;
    appearance: none;
    border-radius: calc(infinity * 1px);
    padding: calc(0.25rem * 1);
    vertical-align: middle;
    border: var(--border) solid var(--input-color, currentColor);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .radio {
      border: var(--border) solid var(--input-color, color-mix(in srgb, currentColor 20%, #0000));
    }
  }
  .radio {
    box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset;
    --size: calc(var(--size-selector, 0.25rem) * 6);
    width: var(--size);
    height: var(--size);
    color: var(--input-color, currentColor);
  }
  .radio:before {
    display: block;
    width: 100%;
    height: 100%;
    border-radius: calc(infinity * 1px);
    --tw-content: "";
    content: var(--tw-content);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
  }
  .radio:focus-visible {
    outline: 2px solid currentColor;
  }
  .radio:checked, .radio[aria-checked="true"] {
    border-color: currentColor;
    background-color: var(--color-base-100);
  }
  @media (prefers-reduced-motion: no-preference) {
    .radio:checked, .radio[aria-checked="true"] {
      animation: radio 0.2s ease-out;
    }
  }
  .radio:checked:before, .radio[aria-checked="true"]:before {
    background-color: currentColor;
    box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
  }
  @media (forced-colors: active) {
    .radio:checked:before, .radio[aria-checked="true"]:before {
      outline-style: var(--tw-outline-style);
      outline-width: 1px;
      outline-offset: calc(1px * -1);
    }
  }
  @media print {
    .radio:checked:before, .radio[aria-checked="true"]:before {
      outline: 0.25rem solid;
      outline-offset: -1rem;
    }
  }
  .radio:disabled {
    cursor: not-allowed;
    opacity: 20%;
  }
  .rating {
    position: relative;
    display: inline-flex;
    vertical-align: middle;
  }
  .rating input {
    border: none;
    appearance: none;
  }
  .rating :where(*) {
    height: calc(0.25rem * 6);
    width: calc(0.25rem * 6);
    border-radius: 0;
    background-color: var(--color-base-content);
    opacity: 20%;
  }
  @media (prefers-reduced-motion: no-preference) {
    .rating :where(*) {
      animation: rating 0.25s ease-out;
    }
  }
  .rating :where(*):is(input) {
    cursor: pointer;
  }
  .rating .rating-hidden {
    width: calc(0.25rem * 2);
    background-color: transparent;
  }
  .rating input[type="radio"]:checked {
    background-image: none;
  }
  .rating *:checked, .rating *[aria-checked="true"], .rating *[aria-current="true"], .rating *:has(~ *:checked, ~ *[aria-checked="true"], ~ *[aria-current="true"]) {
    opacity: 100%;
  }
  .rating *:focus-visible {
    scale: 1.1;
  }
  @media (prefers-reduced-motion: no-preference) {
    .rating *:focus-visible {
      transition: scale 0.2s ease-out;
    }
  }
  .rating *:active:focus {
    animation: none;
    scale: 1.1;
  }
  .rating.rating-xs :where(*:not(.rating-hidden)) {
    width: calc(0.25rem * 4);
    height: calc(0.25rem * 4);
  }
  .rating.rating-sm :where(*:not(.rating-hidden)) {
    width: calc(0.25rem * 5);
    height: calc(0.25rem * 5);
  }
  .rating.rating-md :where(*:not(.rating-hidden)) {
    width: calc(0.25rem * 6);
    height: calc(0.25rem * 6);
  }
  .rating.rating-lg :where(*:not(.rating-hidden)) {
    width: calc(0.25rem * 7);
    height: calc(0.25rem * 7);
  }
  .rating.rating-xl :where(*:not(.rating-hidden)) {
    width: calc(0.25rem * 8);
    height: calc(0.25rem * 8);
  }
  .drawer {
    position: relative;
    display: grid;
    width: 100%;
    grid-auto-columns: max-content auto;
  }
  .stats {
    position: relative;
    display: inline-grid;
    grid-auto-flow: column;
    overflow-x: auto;
    border-radius: var(--radius-box);
  }
  .progress {
    position: relative;
    height: calc(0.25rem * 2);
    width: 100%;
    appearance: none;
    overflow: hidden;
    border-radius: var(--radius-box);
    background-color: currentColor;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .progress {
      background-color: color-mix(in oklab, currentColor 20%, transparent);
    }
  }
  .progress {
    color: var(--color-base-content);
  }
  .progress:indeterminate {
    background-image: repeating-linear-gradient( 90deg, currentColor -1%, currentColor 10%, #0000 10%, #0000 90% );
    background-size: 200%;
    background-position-x: 15%;
  }
  @media (prefers-reduced-motion: no-preference) {
    .progress:indeterminate {
      animation: progress 5s ease-in-out infinite;
    }
  }
  @supports (-moz-appearance: none) {
    .progress:indeterminate::-moz-progress-bar {
      background-color: transparent;
    }
    @media (prefers-reduced-motion: no-preference) {
      .progress:indeterminate::-moz-progress-bar {
        animation: progress 5s ease-in-out infinite;
        background-image: repeating-linear-gradient( 90deg, currentColor -1%, currentColor 10%, #0000 10%, #0000 90% );
        background-size: 200%;
        background-position-x: 15%;
      }
    }
  }
  @supports (-moz-appearance: none) {
    .progress::-moz-progress-bar {
      border-radius: var(--radius-box);
      background-color: currentColor;
    }
  }
  @supports (-webkit-appearance: none) {
    .progress::-webkit-progress-bar {
      border-radius: var(--radius-box);
      background-color: transparent;
    }
    .progress::-webkit-progress-value {
      border-radius: var(--radius-box);
      background-color: currentColor;
    }
  }
  .absolute {
    position: absolute;
  }
  .fixed {
    position: fixed;
  }
  .relative {
    position: relative;
  }
  .static {
    position: static;
  }
  .sticky {
    position: sticky;
  }
  .textarea {
    border: var(--border) solid #0000;
    min-height: calc(0.25rem * 20);
    flex-shrink: 1;
    appearance: none;
    border-radius: var(--radius-field);
    background-color: var(--color-base-100);
    padding-block: calc(0.25rem * 2);
    vertical-align: middle;
    width: clamp(3rem, 20rem, 100%);
    padding-inline-start: 0.75rem;
    padding-inline-end: 0.75rem;
    font-size: 0.875rem;
    touch-action: manipulation;
    border-color: var(--input-color);
    box-shadow: 0 1px var(--input-color) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .textarea {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000) inset, 0 -1px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
    }
  }
  .textarea {
    --input-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .textarea {
      --input-color: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }
  }
  .textarea textarea {
    appearance: none;
    background-color: transparent;
    border: none;
  }
  .textarea textarea:focus, .textarea textarea:focus-within {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .textarea textarea:focus, .textarea textarea:focus-within {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .textarea:focus, .textarea:focus-within {
    --input-color: var(--color-base-content);
    box-shadow: 0 1px var(--input-color);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .textarea:focus, .textarea:focus-within {
      box-shadow: 0 1px color-mix(in oklab, var(--input-color) calc(var(--depth) * 10%), #0000);
    }
  }
  .textarea:focus, .textarea:focus-within {
    outline: 2px solid var(--input-color);
    outline-offset: 2px;
    isolation: isolate;
  }
  .textarea:has(> textarea[disabled]), .textarea:is(:disabled, [disabled]) {
    cursor: not-allowed;
    border-color: var(--color-base-200);
    background-color: var(--color-base-200);
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .textarea:has(> textarea[disabled]), .textarea:is(:disabled, [disabled]) {
      color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
    }
  }
  .textarea:has(> textarea[disabled])::placeholder, .textarea:is(:disabled, [disabled])::placeholder {
    color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .textarea:has(> textarea[disabled])::placeholder, .textarea:is(:disabled, [disabled])::placeholder {
      color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .textarea:has(> textarea[disabled]), .textarea:is(:disabled, [disabled]) {
    box-shadow: none;
  }
  .textarea:has(> textarea[disabled]) > textarea[disabled] {
    cursor: not-allowed;
  }
  .isolate {
    isolation: isolate;
  }
  .stack {
    display: inline-grid;
    grid-template-columns: 3px 4px 1fr 4px 3px;
    grid-template-rows: 3px 4px 1fr 4px 3px;
  }
  .stack > * {
    height: 100%;
    width: 100%;
  }
  .stack > *:nth-child(n + 2) {
    width: 100%;
    opacity: 70%;
  }
  .stack > *:nth-child(2) {
    z-index: 2;
    opacity: 90%;
  }
  .stack > *:nth-child(1) {
    z-index: 3;
    width: 100%;
  }
  .stack > *, .stack.stack-bottom > * {
    grid-column: 3 / 4;
    grid-row: 3 / 6;
  }
  .stack > *:nth-child(2), .stack.stack-bottom > *:nth-child(2) {
    grid-column: 2 / 5;
    grid-row: 2 / 5;
  }
  .stack > *:nth-child(1), .stack.stack-bottom > *:nth-child(1) {
    grid-column: 1 / 6;
    grid-row: 1 / 4;
  }
  .stack.stack-top > * {
    grid-column: 3 / 4;
    grid-row: 1 / 4;
  }
  .stack.stack-top > *:nth-child(2) {
    grid-column: 2 / 5;
    grid-row: 2 / 5;
  }
  .stack.stack-top > *:nth-child(1) {
    grid-column: 1 / 6;
    grid-row: 3 / 6;
  }
  .stack.stack-start > * {
    grid-column: 1 / 4;
    grid-row: 3 / 4;
  }
  .stack.stack-start > *:nth-child(2) {
    grid-column: 2 / 5;
    grid-row: 2 / 5;
  }
  .stack.stack-start > *:nth-child(1) {
    grid-column: 3 / 6;
    grid-row: 1 / 6;
  }
  .stack.stack-end > * {
    grid-column: 3 / 6;
    grid-row: 3 / 4;
  }
  .stack.stack-end > *:nth-child(2) {
    grid-column: 2 / 5;
    grid-row: 2 / 5;
  }
  .stack.stack-end > *:nth-child(1) {
    grid-column: 1 / 4;
    grid-row: 1 / 6;
  }
  .container {
    width: 100%;
  }
  @media (width >= 40rem) {
    .container {
      max-width: 40rem;
    }
  }
  @media (width >= 48rem) {
    .container {
      max-width: 48rem;
    }
  }
  @media (width >= 64rem) {
    .container {
      max-width: 64rem;
    }
  }
  @media (width >= 80rem) {
    .container {
      max-width: 80rem;
    }
  }
  @media (width >= 96rem) {
    .container {
      max-width: 96rem;
    }
  }
  .divider {
    display: flex;
    height: calc(0.25rem * 4);
    flex-direction: row;
    align-items: center;
    align-self: stretch;
    white-space: nowrap;
    margin: var(--divider-m, 1rem 0);
    --divider-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .divider {
      --divider-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
    }
  }
  .divider:before, .divider:after {
    content: "";
    height: calc(0.25rem * 0.5);
    width: 100%;
    flex-grow: 1;
    background-color: var(--divider-color);
  }
  @media print {
    .divider:before, .divider:after {
      border: 0.5px solid;
    }
  }
  .divider:not(:empty) {
    gap: calc(0.25rem * 4);
  }
  .\!filter {
    display: flex !important;
    flex-wrap: wrap !important;
  }
  .\!filter input[type="radio"] {
    width: auto !important;
  }
  .\!filter input {
    overflow: hidden !important;
    opacity: 100% !important;
    scale: 1 !important;
    transition: margin 0.1s, opacity 0.3s, padding 0.3s, border-width 0.1s !important;
  }
  .\!filter input:not(:last-child) {
    margin-inline-end: calc(0.25rem * 1) !important;
  }
  .\!filter input.filter-reset {
    aspect-ratio: 1 / 1 !important;
  }
  .\!filter input.filter-reset::after {
    content: "×" !important;
  }
  .\!filter:not(:has(input:checked:not(.filter-reset))) .filter-reset, .\!filter:not(:has(input:checked:not(.filter-reset))) input[type="reset"] {
    scale: 0 !important;
    border-width: 0 !important;
    margin-inline: calc(0.25rem * 0) !important;
    width: calc(0.25rem * 0) !important;
    padding-inline: calc(0.25rem * 0) !important;
    opacity: 0% !important;
  }
  .\!filter:has(input:checked:not(.filter-reset)) input:not(:checked, .filter-reset, input[type="reset"]) {
    scale: 0 !important;
    border-width: 0 !important;
    margin-inline: calc(0.25rem * 0) !important;
    width: calc(0.25rem * 0) !important;
    padding-inline: calc(0.25rem * 0) !important;
    opacity: 0% !important;
  }
  .filter {
    display: flex;
    flex-wrap: wrap;
  }
  .filter input[type="radio"] {
    width: auto;
  }
  .filter input {
    overflow: hidden;
    opacity: 100%;
    scale: 1;
    transition: margin 0.1s, opacity 0.3s, padding 0.3s, border-width 0.1s;
  }
  .filter input:not(:last-child) {
    margin-inline-end: calc(0.25rem * 1);
  }
  .filter input.filter-reset {
    aspect-ratio: 1 / 1;
  }
  .filter input.filter-reset::after {
    content: "×";
  }
  .filter:not(:has(input:checked:not(.filter-reset))) .filter-reset, .filter:not(:has(input:checked:not(.filter-reset))) input[type="reset"] {
    scale: 0;
    border-width: 0;
    margin-inline: calc(0.25rem * 0);
    width: calc(0.25rem * 0);
    padding-inline: calc(0.25rem * 0);
    opacity: 0%;
  }
  .filter:has(input:checked:not(.filter-reset)) input:not(:checked, .filter-reset, input[type="reset"]) {
    scale: 0;
    border-width: 0;
    margin-inline: calc(0.25rem * 0);
    width: calc(0.25rem * 0);
    padding-inline: calc(0.25rem * 0);
    opacity: 0%;
  }
  .filter\! {
    display: flex !important;
    flex-wrap: wrap !important;
  }
  .filter\! input[type="radio"] {
    width: auto !important;
  }
  .filter\! input {
    overflow: hidden !important;
    opacity: 100% !important;
    scale: 1 !important;
    transition: margin 0.1s, opacity 0.3s, padding 0.3s, border-width 0.1s !important;
  }
  .filter\! input:not(:last-child) {
    margin-inline-end: calc(0.25rem * 1) !important;
  }
  .filter\! input.filter-reset {
    aspect-ratio: 1 / 1 !important;
  }
  .filter\! input.filter-reset::after {
    content: "×" !important;
  }
  .filter\!:not(:has(input:checked:not(.filter-reset))) .filter-reset, .filter\!:not(:has(input:checked:not(.filter-reset))) input[type="reset"] {
    scale: 0 !important;
    border-width: 0 !important;
    margin-inline: calc(0.25rem * 0) !important;
    width: calc(0.25rem * 0) !important;
    padding-inline: calc(0.25rem * 0) !important;
    opacity: 0% !important;
  }
  .filter\!:has(input:checked:not(.filter-reset)) input:not(:checked, .filter-reset, input[type="reset"]) {
    scale: 0 !important;
    border-width: 0 !important;
    margin-inline: calc(0.25rem * 0) !important;
    width: calc(0.25rem * 0) !important;
    padding-inline: calc(0.25rem * 0) !important;
    opacity: 0% !important;
  }
  .mx-auto {
    margin-inline: auto;
  }
  .label {
    display: inline-flex;
    align-items: center;
    gap: calc(0.25rem * 1.5);
    white-space: nowrap;
    color: currentColor;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .label {
      color: color-mix(in oklab, currentColor 60%, transparent);
    }
  }
  .label:has(input) {
    cursor: pointer;
  }
  .label:is(.input > *, .select > *) {
    display: flex;
    height: calc(100% - 0.5rem);
    align-items: center;
    padding-inline: calc(0.25rem * 3);
    white-space: nowrap;
    font-size: inherit;
  }
  .label:is(.input > *, .select > *):first-child {
    margin-inline-start: calc(0.25rem * -3);
    margin-inline-end: calc(0.25rem * 3);
    border-inline-end: var(--border) solid currentColor;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .label:is(.input > *, .select > *):first-child {
      border-inline-end: var(--border) solid color-mix(in oklab, currentColor 10%, #0000);
    }
  }
  .label:is(.input > *, .select > *):last-child {
    margin-inline-start: calc(0.25rem * 3);
    margin-inline-end: calc(0.25rem * -3);
    border-inline-start: var(--border) solid currentColor;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .label:is(.input > *, .select > *):last-child {
      border-inline-start: var(--border) solid color-mix(in oklab, currentColor 10%, #0000);
    }
  }
  .mt-4 {
    margin-top: calc(var(--spacing) * 4);
  }
  .mt-6 {
    margin-top: calc(var(--spacing) * 6);
  }
  .breadcrumbs {
    max-width: 100%;
    overflow-x: auto;
    padding-block: calc(0.25rem * 2);
  }
  .breadcrumbs > menu, .breadcrumbs > ul, .breadcrumbs > ol {
    display: flex;
    min-height: min-content;
    align-items: center;
    white-space: nowrap;
  }
  .breadcrumbs > menu > li, .breadcrumbs > ul > li, .breadcrumbs > ol > li {
    display: flex;
    align-items: center;
  }
  .breadcrumbs > menu > li > *, .breadcrumbs > ul > li > *, .breadcrumbs > ol > li > * {
    display: flex;
    cursor: pointer;
    align-items: center;
    gap: calc(0.25rem * 2);
  }
  @media (hover: hover) {
    .breadcrumbs > menu > li > *:hover, .breadcrumbs > ul > li > *:hover, .breadcrumbs > ol > li > *:hover {
      text-decoration-line: underline;
    }
  }
  .breadcrumbs > menu > li > *:focus, .breadcrumbs > ul > li > *:focus, .breadcrumbs > ol > li > *:focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .breadcrumbs > menu > li > *:focus, .breadcrumbs > ul > li > *:focus, .breadcrumbs > ol > li > *:focus {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .breadcrumbs > menu > li > *:focus-visible, .breadcrumbs > ul > li > *:focus-visible, .breadcrumbs > ol > li > *:focus-visible {
    outline: 2px solid currentColor;
    outline-offset: 2px;
  }
  .breadcrumbs > menu > li + *:before, .breadcrumbs > ul > li + *:before, .breadcrumbs > ol > li + *:before {
    content: "";
    margin-right: calc(0.25rem * 3);
    margin-left: calc(0.25rem * 2);
    display: block;
    height: calc(0.25rem * 1.5);
    width: calc(0.25rem * 1.5);
    opacity: 40%;
    rotate: 45deg;
    border-top: 1px solid;
    border-right: 1px solid;
    background-color: #0000;
  }
  [dir="rtl"] .breadcrumbs > menu > li + *:before, [dir="rtl"] .breadcrumbs > ul > li + *:before, [dir="rtl"] .breadcrumbs > ol > li + *:before {
    rotate: -135deg;
  }
  .mb-2 {
    margin-bottom: calc(var(--spacing) * 2);
  }
  .mb-4 {
    margin-bottom: calc(var(--spacing) * 4);
  }
  .mb-6 {
    margin-bottom: calc(var(--spacing) * 6);
  }
  .ml-4 {
    margin-left: calc(var(--spacing) * 4);
  }
  .status {
    display: inline-block;
    aspect-ratio: 1 / 1;
    width: calc(0.25rem * 2);
    height: calc(0.25rem * 2);
    border-radius: var(--radius-selector);
    background-color: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .status {
      background-color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .status {
    background-position: center;
    background-repeat: no-repeat;
    vertical-align: middle;
    color: color-mix(in srgb, #000 30%, transparent);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .status {
      color: color-mix(in srgb, #000 30%, transparent);
    }
    @supports (color: color-mix(in lab, red, red)) {
      .status {
        color: color-mix(in oklab, var(--color-black) 30%, transparent);
      }
    }
  }
  .status {
    background-image: radial-gradient( circle at 35% 30%, oklch(1 0 0 / calc(var(--depth) * 0.5)), #0000 );
    box-shadow: 0 2px 3px -1px currentColor;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .status {
      box-shadow: 0 2px 3px -1px color-mix(in oklab, currentColor calc(var(--depth) * 100%), #0000);
    }
  }
  .badge {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: calc(0.25rem * 2);
    border-radius: var(--radius-selector);
    vertical-align: middle;
    color: var(--badge-fg);
    border: var(--border) solid var(--badge-color, var(--color-base-200));
    font-size: 0.875rem;
    width: fit-content;
    padding-inline: calc(0.25rem * 3 - var(--border));
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
    background-color: var(--badge-bg);
    --badge-bg: var(--badge-color, var(--color-base-100));
    --badge-fg: var(--color-base-content);
    --size: calc(var(--size-selector, 0.25rem) * 6);
    height: var(--size);
  }
  .kbd {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border-radius: var(--radius-field);
    background-color: var(--color-base-200);
    vertical-align: middle;
    padding-left: 0.5em;
    padding-right: 0.5em;
    border: var(--border) solid var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .kbd {
      border: var(--border) solid color-mix(in srgb, var(--color-base-content) 20%, #0000);
    }
  }
  .kbd {
    border-bottom: calc(var(--border) + 1px) solid var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    .kbd {
      border-bottom: calc(var(--border) + 1px) solid color-mix(in srgb, var(--color-base-content) 20%, #0000);
    }
  }
  .kbd {
    --size: calc(var(--size-selector, 0.25rem) * 6);
    font-size: 0.875rem;
    height: var(--size);
    min-width: var(--size);
  }
  .tabs {
    display: flex;
    flex-wrap: wrap;
    --tabs-height: auto;
    --tabs-direction: row;
    --tab-height: calc(var(--size-field, 0.25rem) * 10);
    height: var(--tabs-height);
    flex-direction: var(--tabs-direction);
  }
  .navbar {
    display: flex;
    width: 100%;
    align-items: center;
    padding: 0.5rem;
    min-height: 4rem;
  }
  .footer {
    display: grid;
    width: 100%;
    grid-auto-flow: row;
    place-items: start;
    column-gap: calc(0.25rem * 4);
    row-gap: calc(0.25rem * 10);
    font-size: 0.875rem;
    line-height: 1.25rem;
  }
  .footer > * {
    display: grid;
    place-items: start;
    gap: calc(0.25rem * 2);
  }
  .footer.footer-center {
    grid-auto-flow: column dense;
    place-items: center;
    text-align: center;
  }
  .footer.footer-center > * {
    place-items: center;
  }
  .stat {
    display: inline-grid;
    width: 100%;
    column-gap: calc(0.25rem * 4);
    padding-inline: calc(0.25rem * 6);
    padding-block: calc(0.25rem * 4);
    grid-template-columns: repeat(1, 1fr);
  }
  .stat:not(:last-child) {
    border-inline-end: var(--border) dashed currentColor;
  }
  @supports (color: color-mix(in lab, red, red)) {
    .stat:not(:last-child) {
      border-inline-end: var(--border) dashed color-mix(in oklab, currentColor 10%, #0000);
    }
  }
  .stat:not(:last-child) {
    border-block-end: none;
  }
  .alert {
    display: grid;
    align-items: center;
    gap: calc(0.25rem * 4);
    border-radius: var(--radius-box);
    padding-inline: calc(0.25rem * 4);
    padding-block: calc(0.25rem * 3);
    color: var(--color-base-content);
    background-color: var(--alert-color, var(--color-base-200));
    justify-content: start;
    justify-items: start;
    grid-auto-flow: column;
    grid-template-columns: auto;
    text-align: start;
    border: var(--border) solid var(--color-base-200);
    font-size: 0.875rem;
    line-height: 1.25rem;
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
    box-shadow: 0 3px 0 -2px oklch(100% 0 0 / calc(var(--depth) * 0.08)) inset, 0 1px #000, 0 4px 3px -2px oklch(0% 0 0 / calc(var(--depth) * 0.08));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .alert {
      box-shadow: 0 3px 0 -2px oklch(100% 0 0 / calc(var(--depth) * 0.08)) inset, 0 1px color-mix( in oklab, color-mix(in oklab, #000 20%, var(--alert-color, var(--color-base-200))) calc(var(--depth) * 20%), #0000 ), 0 4px 3px -2px oklch(0% 0 0 / calc(var(--depth) * 0.08));
    }
  }
  .alert:has(:nth-child(2)) {
    grid-template-columns: auto minmax(auto, 1fr);
  }
  .alert.alert-outline {
    background-color: transparent;
    color: var(--alert-color);
    box-shadow: none;
    background-image: none;
  }
  .alert.alert-dash {
    background-color: transparent;
    color: var(--alert-color);
    border-style: dashed;
    box-shadow: none;
    background-image: none;
  }
  .alert.alert-soft {
    color: var(--alert-color, var(--color-base-content));
    background: var(--alert-color, var(--color-base-content));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .alert.alert-soft {
      background: color-mix( in oklab, var(--alert-color, var(--color-base-content)) 8%, var(--color-base-100) );
    }
  }
  .alert.alert-soft {
    border-color: var(--alert-color, var(--color-base-content));
  }
  @supports (color: color-mix(in lab, red, red)) {
    .alert.alert-soft {
      border-color: color-mix( in oklab, var(--alert-color, var(--color-base-content)) 10%, var(--color-base-100) );
    }
  }
  .alert.alert-soft {
    box-shadow: none;
    background-image: none;
  }
  .fieldset {
    display: grid;
    gap: calc(0.25rem * 1.5);
    padding-block: calc(0.25rem * 1);
    font-size: 0.75rem;
    grid-template-columns: 1fr;
    grid-auto-rows: max-content;
  }
  .join {
    display: inline-flex;
    align-items: stretch;
    --join-ss: 0;
    --join-se: 0;
    --join-es: 0;
    --join-ee: 0;
  }
  .join :where(.join-item) {
    border-start-start-radius: var(--join-ss, 0);
    border-start-end-radius: var(--join-se, 0);
    border-end-start-radius: var(--join-es, 0);
    border-end-end-radius: var(--join-ee, 0);
  }
  .join :where(.join-item) * {
    --join-ss: var(--radius-field);
    --join-se: var(--radius-field);
    --join-es: var(--radius-field);
    --join-ee: var(--radius-field);
  }
  .join > .join-item:where(:first-child) {
    --join-ss: var(--radius-field);
    --join-se: 0;
    --join-es: var(--radius-field);
    --join-ee: 0;
  }
  .join :first-child:not(:last-child) :where(.join-item) {
    --join-ss: var(--radius-field);
    --join-se: 0;
    --join-es: var(--radius-field);
    --join-ee: 0;
  }
  .join > .join-item:where(:last-child) {
    --join-ss: 0;
    --join-se: var(--radius-field);
    --join-es: 0;
    --join-ee: var(--radius-field);
  }
  .join :last-child:not(:first-child) :where(.join-item) {
    --join-ss: 0;
    --join-se: var(--radius-field);
    --join-es: 0;
    --join-ee: var(--radius-field);
  }
  .join > .join-item:where(:only-child) {
    --join-ss: var(--radius-field);
    --join-se: var(--radius-field);
    --join-es: var(--radius-field);
    --join-ee: var(--radius-field);
  }
  .join :only-child :where(.join-item) {
    --join-ss: var(--radius-field);
    --join-se: var(--radius-field);
    --join-es: var(--radius-field);
    --join-ee: var(--radius-field);
  }
  :root .prose {
    --tw-prose-body: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    :root .prose {
      --tw-prose-body: color-mix(in oklab, var(--color-base-content) 80%, #0000);
    }
  }
  :root .prose {
    --tw-prose-headings: var(--color-base-content);
    --tw-prose-lead: var(--color-base-content);
    --tw-prose-links: var(--color-base-content);
    --tw-prose-bold: var(--color-base-content);
    --tw-prose-counters: var(--color-base-content);
    --tw-prose-bullets: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    :root .prose {
      --tw-prose-bullets: color-mix(in oklab, var(--color-base-content) 50%, #0000);
    }
  }
  :root .prose {
    --tw-prose-hr: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    :root .prose {
      --tw-prose-hr: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }
  }
  :root .prose {
    --tw-prose-quotes: var(--color-base-content);
    --tw-prose-quote-borders: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    :root .prose {
      --tw-prose-quote-borders: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }
  }
  :root .prose {
    --tw-prose-captions: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    :root .prose {
      --tw-prose-captions: color-mix(in oklab, var(--color-base-content) 50%, #0000);
    }
  }
  :root .prose {
    --tw-prose-code: var(--color-base-content);
    --tw-prose-pre-code: var(--color-neutral-content);
    --tw-prose-pre-bg: var(--color-neutral);
    --tw-prose-th-borders: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    :root .prose {
      --tw-prose-th-borders: color-mix(in oklab, var(--color-base-content) 50%, #0000);
    }
  }
  :root .prose {
    --tw-prose-td-borders: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    :root .prose {
      --tw-prose-td-borders: color-mix(in oklab, var(--color-base-content) 20%, #0000);
    }
  }
  :root .prose {
    --tw-prose-kbd: var(--color-base-content);
  }
  @supports (color: color-mix(in lab, red, red)) {
    :root .prose {
      --tw-prose-kbd: color-mix(in oklab, var(--color-base-content) 80%, #0000);
    }
  }
  :root .prose :where(code):not(pre > code) {
    background-color: var(--color-base-200);
    border-radius: var(--radius-selector);
    border: var(--border) solid var(--color-base-300);
    padding-inline: 0.5em;
    font-weight: inherit;
  }
  :root .prose :where(code):not(pre > code):before, :root .prose :where(code):not(pre > code):after {
    display: none;
  }
  .mask {
    display: inline-block;
    vertical-align: middle;
    mask-size: contain;
    mask-repeat: no-repeat;
    mask-position: center;
  }
  .\!hidden {
    display: none !important;
  }
  .block {
    display: block;
  }
  .contents {
    display: contents;
  }
  .flex {
    display: flex;
  }
  .grid {
    display: grid;
  }
  .hidden {
    display: none;
  }
  .inline {
    display: inline;
  }
  .inline-block {
    display: inline-block;
  }
  .inline-flex {
    display: inline-flex;
  }
  .inline-table {
    display: inline-table;
  }
  .list-item {
    display: list-item;
  }
  .table {
    display: table;
  }
  .table-caption {
    display: table-caption;
  }
  .table-cell {
    display: table-cell;
  }
  .table-column {
    display: table-column;
  }
  .table-column-group {
    display: table-column-group;
  }
  .table-footer-group {
    display: table-footer-group;
  }
  .table-header-group {
    display: table-header-group;
  }
  .table-row {
    display: table-row;
  }
  .table-row-group {
    display: table-row-group;
  }
  .h-auto {
    height: auto;
  }
  .h-screen {
    height: 100vh;
  }
  .min-h-screen {
    min-height: 100vh;
  }
  .max-w-full {
    max-width: 100%;
  }
  .flex-1 {
    flex: 1;
  }
  .flex-shrink {
    flex-shrink: 1;
  }
  .flex-grow {
    flex-grow: 1;
  }
  .grow {
    flex-grow: 1;
  }
  .border-collapse {
    border-collapse: collapse;
  }
  .transform {
    transform: var(--tw-rotate-x,) var(--tw-rotate-y,) var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
  }
  .link {
    cursor: pointer;
    text-decoration-line: underline;
  }
  .link:focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  @media (forced-colors: active) {
    .link:focus {
      outline: 2px solid transparent;
      outline-offset: 2px;
    }
  }
  .link:focus-visible {
    outline: 2px solid currentColor;
    outline-offset: 2px;
  }
  .resize {
    resize: both;
  }
  .list-disc {
    list-style-type: disc;
  }
  .flex-col {
    flex-direction: column;
  }
  .flex-wrap {
    flex-wrap: wrap;
  }
  .content-start {
    align-content: flex-start;
  }
  .items-center {
    align-items: center;
  }
  .justify-between {
    justify-content: space-between;
  }
  .justify-center {
    justify-content: center;
  }
  :where(.space-y-2 > :not(:last-child)) {
    --tw-space-y-reverse: 0;
    margin-block-start: calc(calc(var(--spacing) * 2) * var(--tw-space-y-reverse));
    margin-block-end: calc(calc(var(--spacing) * 2) * calc(1 - var(--tw-space-y-reverse)));
  }
  .truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  .rounded {
    border-radius: 0.25rem;
  }
  .rounded-box {
    border-radius: var(--radius-box);
  }
  .rounded-box {
    border-radius: var(--radius-box);
  }
  .border {
    border-style: var(--tw-border-style);
    border-width: 1px;
  }
  .alert-info {
    border-color: var(--color-info);
    color: var(--color-info-content);
    --alert-color: var(--color-info);
  }
  .bg-gray-50 {
    background-color: var(--color-gray-50);
  }
  .bg-gray-100 {
    background-color: var(--color-gray-100);
  }
  .bg-white {
    background-color: var(--color-white);
  }
  .mask-repeat {
    mask-repeat: repeat;
  }
  .p-4 {
    padding: calc(var(--spacing) * 4);
  }
  .p-6 {
    padding: calc(var(--spacing) * 6);
  }
  .px-4 {
    padding-inline: calc(var(--spacing) * 4);
  }
  .py-6 {
    padding-block: calc(var(--spacing) * 6);
  }
  .pl-5 {
    padding-left: calc(var(--spacing) * 5);
  }
  .text-center {
    text-align: center;
  }
  .text-justify {
    text-align: justify;
  }
  .font-sans {
    font-family: var(--font-sans);
  }
  .font-serif {
    font-family: var(--font-serif);
  }
  .text-3xl {
    font-size: var(--text-3xl);
    line-height: var(--tw-leading, var(--text-3xl--line-height));
  }
  .text-5xl {
    font-size: var(--text-5xl);
    line-height: var(--tw-leading, var(--text-5xl--line-height));
  }
  .text-xl {
    font-size: var(--text-xl);
    line-height: var(--tw-leading, var(--text-xl--line-height));
  }
  .leading-normal {
    --tw-leading: var(--leading-normal);
    line-height: var(--leading-normal);
  }
  .font-bold {
    --tw-font-weight: var(--font-weight-bold);
    font-weight: var(--font-weight-bold);
  }
  .tracking-normal {
    --tw-tracking: var(--tracking-normal);
    letter-spacing: var(--tracking-normal);
  }
  .text-wrap {
    text-wrap: wrap;
  }
  .text-black {
    color: var(--color-black);
  }
  .text-blue-600 {
    color: var(--color-blue-600);
  }
  .text-gray-600 {
    color: var(--color-gray-600);
  }
  .text-gray-700 {
    color: var(--color-gray-700);
  }
  .text-gray-800 {
    color: var(--color-gray-800);
  }
  .text-green-600 {
    color: var(--color-green-600);
  }
  .capitalize {
    text-transform: capitalize;
  }
  .lowercase {
    text-transform: lowercase;
  }
  .uppercase {
    text-transform: uppercase;
  }
  .italic {
    font-style: italic;
  }
  .ordinal {
    --tw-ordinal: ordinal;
    font-variant-numeric: var(--tw-ordinal,) var(--tw-slashed-zero,) var(--tw-numeric-figure,) var(--tw-numeric-spacing,) var(--tw-numeric-fraction,);
  }
  .line-through {
    text-decoration-line: line-through;
  }
  .overline {
    text-decoration-line: overline;
  }
  .underline {
    text-decoration-line: underline;
  }
  .shadow {
    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 1px 2px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .ring {
    --tw-ring-shadow: var(--tw-ring-inset,) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .outline {
    outline-style: var(--tw-outline-style);
    outline-width: 1px;
  }
  .blur {
    --tw-blur: blur(8px);
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .drop-shadow {
    --tw-drop-shadow-size: drop-shadow(0 1px 2px var(--tw-drop-shadow-color, rgb(0 0 0 / 0.1))) drop-shadow(0 1px 1px var(--tw-drop-shadow-color, rgb(0 0 0 / 0.06)));
    --tw-drop-shadow: drop-shadow(0 1px 2px rgb(0 0 0 / 0.1)) drop-shadow( 0 1px 1px rgb(0 0 0 / 0.06));
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .grayscale {
    --tw-grayscale: grayscale(100%);
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .invert {
    --tw-invert: invert(100%);
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .sepia {
    --tw-sepia: sepia(100%);
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .\!filter {
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,) !important;
  }
  .filter {
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .filter\! {
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,) !important;
  }
  .transition {
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter, display, content-visibility, overlay, pointer-events;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .ease-in {
    --tw-ease: var(--ease-in);
    transition-timing-function: var(--ease-in);
  }
  .ease-in-out {
    --tw-ease: var(--ease-in-out);
    transition-timing-function: var(--ease-in-out);
  }
  .ease-out {
    --tw-ease: var(--ease-out);
    transition-timing-function: var(--ease-out);
  }
  .badge-success {
    --badge-color: var(--color-success);
    --badge-fg: var(--color-success-content);
  }
  @media (hover: hover) {
    .hover\:text-green-600:hover {
      color: var(--color-green-600);
    }
  }
  @media (hover: hover) {
    .hover\:underline:hover {
      text-decoration-line: underline;
    }
  }
}
@layer base {
  :where(:root),:root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98% 0 0);
    --color-base-300: oklch(95% 0 0);
    --color-base-content: oklch(21% 0.006 285.885);
    --color-primary: oklch(45% 0.24 277.023);
    --color-primary-content: oklch(93% 0.034 272.788);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  @media (prefers-color-scheme: dark) {
    :root:not([data-theme]) {
      color-scheme: dark;
      --color-base-100: oklch(25.33% 0.016 252.42);
      --color-base-200: oklch(23.26% 0.014 253.1);
      --color-base-300: oklch(21.15% 0.012 254.09);
      --color-base-content: oklch(97.807% 0.029 256.847);
      --color-primary: oklch(58% 0.233 277.117);
      --color-primary-content: oklch(96% 0.018 272.314);
      --color-secondary: oklch(65% 0.241 354.308);
      --color-secondary-content: oklch(94% 0.028 342.258);
      --color-accent: oklch(77% 0.152 181.912);
      --color-accent-content: oklch(38% 0.063 188.416);
      --color-neutral: oklch(14% 0.005 285.823);
      --color-neutral-content: oklch(92% 0.004 286.32);
      --color-info: oklch(74% 0.16 232.661);
      --color-info-content: oklch(29% 0.066 243.157);
      --color-success: oklch(76% 0.177 163.223);
      --color-success-content: oklch(37% 0.077 168.94);
      --color-warning: oklch(82% 0.189 84.429);
      --color-warning-content: oklch(41% 0.112 45.904);
      --color-error: oklch(71% 0.194 13.428);
      --color-error-content: oklch(27% 0.105 12.094);
      --radius-selector: 0.5rem;
      --radius-field: 0.25rem;
      --radius-box: 0.5rem;
      --size-selector: 0.25rem;
      --size-field: 0.25rem;
      --border: 1px;
      --depth: 1;
      --noise: 0;
    }
  }
}
@layer base {
  :root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(98% 0 0);
    --color-base-300: oklch(95% 0 0);
    --color-base-content: oklch(21% 0.006 285.885);
    --color-primary: oklch(45% 0.24 277.023);
    --color-primary-content: oklch(93% 0.034 272.788);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=dark]:checked),[data-theme=dark] {
    color-scheme: dark;
    --color-base-100: oklch(25.33% 0.016 252.42);
    --color-base-200: oklch(23.26% 0.014 253.1);
    --color-base-300: oklch(21.15% 0.012 254.09);
    --color-base-content: oklch(97.807% 0.029 256.847);
    --color-primary: oklch(58% 0.233 277.117);
    --color-primary-content: oklch(96% 0.018 272.314);
    --color-secondary: oklch(65% 0.241 354.308);
    --color-secondary-content: oklch(94% 0.028 342.258);
    --color-accent: oklch(77% 0.152 181.912);
    --color-accent-content: oklch(38% 0.063 188.416);
    --color-neutral: oklch(14% 0.005 285.823);
    --color-neutral-content: oklch(92% 0.004 286.32);
    --color-info: oklch(74% 0.16 232.661);
    --color-info-content: oklch(29% 0.066 243.157);
    --color-success: oklch(76% 0.177 163.223);
    --color-success-content: oklch(37% 0.077 168.94);
    --color-warning: oklch(82% 0.189 84.429);
    --color-warning-content: oklch(41% 0.112 45.904);
    --color-error: oklch(71% 0.194 13.428);
    --color-error-content: oklch(27% 0.105 12.094);
    --radius-selector: 0.5rem;
    --radius-field: 0.25rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  :where( :root:has( .modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not(.drawer-open) > .drawer-toggle:checked ) ) {
    scrollbar-gutter: stable;
    background-image: linear-gradient(var(--color-base-100), var(--color-base-100));
    --root-bg: var(--color-base-100);
  }
  @supports (color: color-mix(in lab, red, red)) {
    :where( :root:has( .modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not(.drawer-open) > .drawer-toggle:checked ) ) {
      --root-bg: color-mix(in srgb, var(--color-base-100), oklch(0% 0 0) 40%);
    }
  }
  :where(.modal[open], .modal-open, .modal-toggle:checked + .modal):not(.modal-start, .modal-end) {
    scrollbar-gutter: stable;
  }
}
@layer base {
  @property --radialprogress {
    syntax: "<percentage>";
    inherits: true;
    initial-value: 0%;
  }
}
@layer base {
  :root {
    --fx-noise: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 200'%3E%3Cfilter id='a'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.34' numOctaves='4' stitchTiles='stitch'%3E%3C/feTurbulence%3E%3C/filter%3E%3Crect width='200' height='200' filter='url(%23a)' opacity='0.2'%3E%3C/rect%3E%3C/svg%3E");
  }
}
@layer base {
  :root, [data-theme] {
    background-color: var(--root-bg, var(--color-base-100));
    color: var(--color-base-content);
  }
}
@layer base {
  :root {
    scrollbar-color: currentColor #0000;
  }
  @supports (color: color-mix(in lab, red, red)) {
    :root {
      scrollbar-color: color-mix(in oklch, currentColor 35%, #0000) #0000;
    }
  }
}
@layer base {
  :root:has( .modal-open, .modal[open], .modal:target, .modal-toggle:checked, .drawer:not([class*="drawer-open"]) > .drawer-toggle:checked ) {
    overflow: hidden;
  }
}
@keyframes dropdown {
  0% {
    opacity: 0;
  }
}
@keyframes radio {
  0% {
    padding: 5px;
  }
  50% {
    padding: 3px;
  }
}
@keyframes toast {
  0% {
    scale: 0.9;
    opacity: 0;
  }
  100% {
    scale: 1;
    opacity: 1;
  }
}
@keyframes rating {
  0%, 40% {
    scale: 1.1;
    filter: brightness(1.05) contrast(1.05);
  }
}
@keyframes skeleton {
  0% {
    background-position: 150%;
  }
  100% {
    background-position: -50%;
  }
}
@keyframes progress {
  50% {
    background-position-x: -115%;
  }
}
@property --tw-rotate-x {
  syntax: "*";
  inherits: false;
}
@property --tw-rotate-y {
  syntax: "*";
  inherits: false;
}
@property --tw-rotate-z {
  syntax: "*";
  inherits: false;
}
@property --tw-skew-x {
  syntax: "*";
  inherits: false;
}
@property --tw-skew-y {
  syntax: "*";
  inherits: false;
}
@property --tw-space-y-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-leading {
  syntax: "*";
  inherits: false;
}
@property --tw-font-weight {
  syntax: "*";
  inherits: false;
}
@property --tw-tracking {
  syntax: "*";
  inherits: false;
}
@property --tw-ordinal {
  syntax: "*";
  inherits: false;
}
@property --tw-slashed-zero {
  syntax: "*";
  inherits: false;
}
@property --tw-numeric-figure {
  syntax: "*";
  inherits: false;
}
@property --tw-numeric-spacing {
  syntax: "*";
  inherits: false;
}
@property --tw-numeric-fraction {
  syntax: "*";
  inherits: false;
}
@property --tw-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-inset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-ring-inset {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-offset-width {
  syntax: "<length>";
  inherits: false;
  initial-value: 0px;
}
@property --tw-ring-offset-color {
  syntax: "*";
  inherits: false;
  initial-value: #fff;
}
@property --tw-ring-offset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-outline-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-blur {
  syntax: "*";
  inherits: false;
}
@property --tw-brightness {
  syntax: "*";
  inherits: false;
}
@property --tw-contrast {
  syntax: "*";
  inherits: false;
}
@property --tw-grayscale {
  syntax: "*";
  inherits: false;
}
@property --tw-hue-rotate {
  syntax: "*";
  inherits: false;
}
@property --tw-invert {
  syntax: "*";
  inherits: false;
}
@property --tw-opacity {
  syntax: "*";
  inherits: false;
}
@property --tw-saturate {
  syntax: "*";
  inherits: false;
}
@property --tw-sepia {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-drop-shadow-size {
  syntax: "*";
  inherits: false;
}
@property --tw-ease {
  syntax: "*";
  inherits: false;
}
@layer properties {
  @supports ((-webkit-hyphens: none) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color:rgb(from red r g b)))) {
    *, ::before, ::after, ::backdrop {
      --tw-rotate-x: initial;
      --tw-rotate-y: initial;
      --tw-rotate-z: initial;
      --tw-skew-x: initial;
      --tw-skew-y: initial;
      --tw-space-y-reverse: 0;
      --tw-border-style: solid;
      --tw-leading: initial;
      --tw-font-weight: initial;
      --tw-tracking: initial;
      --tw-ordinal: initial;
      --tw-slashed-zero: initial;
      --tw-numeric-figure: initial;
      --tw-numeric-spacing: initial;
      --tw-numeric-fraction: initial;
      --tw-shadow: 0 0 #0000;
      --tw-shadow-color: initial;
      --tw-shadow-alpha: 100%;
      --tw-inset-shadow: 0 0 #0000;
      --tw-inset-shadow-color: initial;
      --tw-inset-shadow-alpha: 100%;
      --tw-ring-color: initial;
      --tw-ring-shadow: 0 0 #0000;
      --tw-inset-ring-color: initial;
      --tw-inset-ring-shadow: 0 0 #0000;
      --tw-ring-inset: initial;
      --tw-ring-offset-width: 0px;
      --tw-ring-offset-color: #fff;
      --tw-ring-offset-shadow: 0 0 #0000;
      --tw-outline-style: solid;
      --tw-blur: initial;
      --tw-brightness: initial;
      --tw-contrast: initial;
      --tw-grayscale: initial;
      --tw-hue-rotate: initial;
      --tw-invert: initial;
      --tw-opacity: initial;
      --tw-saturate: initial;
      --tw-sepia: initial;
      --tw-drop-shadow: initial;
      --tw-drop-shadow-color: initial;
      --tw-drop-shadow-alpha: 100%;
      --tw-drop-shadow-size: initial;
      --tw-ease: initial;
    }
  }
}
